// <auto-generated />
using ErpInfrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ErpInfrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181108112750_update141")]
    partial class update141
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ErpCore.Entities.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<string>("AppointmentDay");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("ConsultantId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("FinalTime");

                    b.Property<bool?>("IsCancelled");

                    b.Property<bool?>("IsFinalAppointment");

                    b.Property<bool?>("IsPaid");

                    b.Property<long?>("PatientId");

                    b.Property<long?>("PatientInvoiceId");

                    b.Property<string>("PatientType");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("TentativeTime");

                    b.Property<DateTime?>("TimeIn");

                    b.Property<DateTime?>("TimeOut");

                    b.Property<long?>("UserId");

                    b.Property<long?>("VisitId");

                    b.Property<long?>("VisitNatureId");

                    b.Property<string>("VisitStatus");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitId")
                        .IsUnique()
                        .HasFilter("[VisitId] IS NOT NULL");

                    b.HasIndex("VisitNatureId");

                    b.ToTable("Hims_Appointment");
                });

            modelBuilder.Entity("ErpCore.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ErpCore.Entities.BioChemistryTestDetails", b =>
                {
                    b.Property<long>("BioChemistryTestDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BioChemistryTestId");

                    b.Property<long?>("BioChemistryTestOnTreatmentId");

                    b.Property<long?>("BioChemistryTestOutsideId");

                    b.Property<long?>("BioChemistryTestOutsiderId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsReChecked");

                    b.Property<string>("LogicalOperator");

                    b.Property<long?>("PatientBioChemistryTestId");

                    b.Property<string>("ReferenceRange");

                    b.Property<string>("Remarks");

                    b.Property<string>("Result");

                    b.Property<long?>("TestUnitId");

                    b.HasKey("BioChemistryTestDetailsId");

                    b.HasIndex("BioChemistryTestId");

                    b.HasIndex("BioChemistryTestOnTreatmentId");

                    b.HasIndex("BioChemistryTestOutsiderId");

                    b.HasIndex("TestUnitId");

                    b.ToTable("Hims_BioChemistryTestDetails");
                });

            modelBuilder.Entity("ErpCore.Entities.BioChemistryTestOnTreatment", b =>
                {
                    b.Property<long>("BioChemistryTestOnTreatmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsRandom");

                    b.Property<string>("LMP");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<string>("RefRange");

                    b.HasKey("BioChemistryTestOnTreatmentId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.ToTable("Hims_BioChemistryTestOnTreatment");
                });

            modelBuilder.Entity("ErpCore.Entities.BioChemistryTestOutsider", b =>
                {
                    b.Property<long>("BioChemistryTestOutsiderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<long?>("ConsultantId");

                    b.Property<string>("Days");

                    b.Property<bool?>("IsRandom");

                    b.Property<string>("LMP");

                    b.Property<string>("Others");

                    b.Property<long?>("PatientId");

                    b.HasKey("BioChemistryTestOutsiderId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("PatientId");

                    b.ToTable("Hims_BioChemistryTestOutsider");
                });

            modelBuilder.Entity("ErpCore.Entities.Biopsy", b =>
                {
                    b.Property<long>("BiopsyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BiopsyType");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<string>("Collectionnumber");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<long?>("PatientId");

                    b.Property<string>("PesaLeft");

                    b.Property<string>("PesaResult");

                    b.Property<string>("PesaRight");

                    b.Property<DateTime?>("PesaTime");

                    b.Property<string>("ProcedureNumber");

                    b.Property<string>("Rmarks");

                    b.Property<string>("TeseLeft");

                    b.Property<string>("TeseResult");

                    b.Property<string>("TeseRight");

                    b.Property<DateTime?>("TeseTime");

                    b.HasKey("BiopsyId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.HasIndex("PatientId");

                    b.ToTable("Hims_Biopsy");
                });

            modelBuilder.Entity("ErpCore.Entities.Branch", b =>
                {
                    b.Property<long>("BranchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BranchCode");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.ToTable("Sys_Branch");
                });

            modelBuilder.Entity("ErpCore.Entities.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.ToTable("Sys_City");
                });

            modelBuilder.Entity("ErpCore.Entities.ClinicalRecordDrugs", b =>
                {
                    b.Property<long>("ClinicalRecordDrugsId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Days");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("FromDate");

                    b.Property<long?>("MedicineId");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<int>("Quanitity");

                    b.Property<DateTime?>("ToDate");

                    b.Property<string>("TotalDosage");

                    b.HasKey("ClinicalRecordDrugsId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientClinicalRecordId");

                    b.ToTable("Hims_ClinicalRecordDrugs");
                });

            modelBuilder.Entity("ErpCore.Entities.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("NumberOfEmployees");

                    b.HasKey("CompanyId");

                    b.ToTable("Sys_Company");
                });

            modelBuilder.Entity("ErpCore.Entities.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Sys_Country");
                });

            modelBuilder.Entity("ErpCore.Entities.DeliveryChallan", b =>
                {
                    b.Property<long>("DeliveryChallanId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<string>("ChallanNumber");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DeliveryOrderId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Remarks");

                    b.Property<long?>("SalesInvoiceId");

                    b.Property<long?>("TransportId");

                    b.HasKey("DeliveryChallanId");

                    b.HasIndex("DeliveryOrderId")
                        .IsUnique()
                        .HasFilter("[DeliveryOrderId] IS NOT NULL");

                    b.HasIndex("TransportId");

                    b.ToTable("Inv_DeliveryChallan");
                });

            modelBuilder.Entity("ErpCore.Entities.DeliveryOrder", b =>
                {
                    b.Property<long>("DeliveryOrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DateNow");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DeliveryChallanId");

                    b.Property<string>("DeliveryOrderCode");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsIssued");

                    b.Property<bool?>("IsProcessed");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<string>("NewDescription");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<long?>("SalesOrderId");

                    b.Property<DateTime?>("SalesOrderReceiveDate");

                    b.Property<long?>("UserId");

                    b.HasKey("DeliveryOrderId");

                    b.HasIndex("SalesOrderId")
                        .IsUnique()
                        .HasFilter("[SalesOrderId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Inv_DeliveryOrder");
                });

            modelBuilder.Entity("ErpCore.Entities.DeliveryOrderItem", b =>
                {
                    b.Property<long>("DeliveryOrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DeliveryOrderId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<double?>("ShippedQuantity");

                    b.HasKey("DeliveryOrderItemId");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("Inv_DeliveryOrderItem");
                });

            modelBuilder.Entity("ErpCore.Entities.Department", b =>
                {
                    b.Property<long>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("DepartmentId");

                    b.HasIndex("BranchId");

                    b.ToTable("Sys_Department");
                });

            modelBuilder.Entity("ErpCore.Entities.EmbryoFreezeThawed", b =>
                {
                    b.Property<long>("EmbryoFreezeThawedId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<string>("Can");

                    b.Property<string>("Cannister");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Drawer");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("StrawId");

                    b.Property<long?>("ThawAssessmentId");

                    b.Property<string>("TopBottom");

                    b.HasKey("EmbryoFreezeThawedId");

                    b.HasIndex("ThawAssessmentId");

                    b.ToTable("Hims_EmbryoFreezeThawed");
                });

            modelBuilder.Entity("ErpCore.Entities.EmbryoFreezeUnthawed", b =>
                {
                    b.Property<long>("EmbryoFreezeUnthawedId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Can");

                    b.Property<string>("Cannister");

                    b.Property<string>("Drawer");

                    b.Property<string>("FreeFreeze");

                    b.Property<DateTime?>("FreezeDate");

                    b.Property<string>("StrawId");

                    b.Property<long?>("ThawAssessmentId");

                    b.Property<string>("TopBottom");

                    b.HasKey("EmbryoFreezeUnthawedId");

                    b.HasIndex("ThawAssessmentId");

                    b.ToTable("Hims_EmbryoFreezeUnthawed");
                });

            modelBuilder.Entity("ErpCore.Entities.Feature", b =>
                {
                    b.Property<long>("FeatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("ModuleId");

                    b.Property<string>("Name");

                    b.HasKey("FeatureId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Sys_Feature");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseInvoice", b =>
                {
                    b.Property<long>("FinancePurchaseInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillNumber");

                    b.Property<double?>("CreditDays");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<long?>("DetailAccountId");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountPercentage");

                    b.Property<double?>("Expenses");

                    b.Property<long?>("FinancePurchaseReturnId");

                    b.Property<double?>("GstAmount");

                    b.Property<double?>("GstPercentage");

                    b.Property<string>("InvoiceNumber");

                    b.Property<double?>("TaxAmount");

                    b.Property<double?>("TaxPercentage");

                    b.Property<double?>("TotalAmount");

                    b.Property<string>("VoucherNumber");

                    b.Property<double>("WihtholdingTaxAmount");

                    b.Property<double?>("WithholdingTaxPercentage");

                    b.HasKey("FinancePurchaseInvoiceId");

                    b.HasIndex("DetailAccountId");

                    b.HasIndex("FinancePurchaseReturnId")
                        .IsUnique()
                        .HasFilter("[FinancePurchaseReturnId] IS NOT NULL");

                    b.ToTable("Finance_PurchaseInvoice");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseInvoiceDetail", b =>
                {
                    b.Property<long>("FinancePurchaseInvoiceDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<long?>("FinancePurchaseInvoiceId");

                    b.Property<string>("ItemDescription");

                    b.HasKey("FinancePurchaseInvoiceDetailId");

                    b.HasIndex("FinancePurchaseInvoiceId");

                    b.ToTable("Finance_PurchaseInvoiceDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseReturn", b =>
                {
                    b.Property<long>("FinancePurchaseReturnId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillNumber");

                    b.Property<double?>("CreditDays");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<long?>("DetailAccountId");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountPercentage");

                    b.Property<double?>("Expenses");

                    b.Property<long?>("FinancePurchaseInvoiceId");

                    b.Property<double?>("GstAmount");

                    b.Property<double?>("GstPercentage");

                    b.Property<string>("InvoceNumber");

                    b.Property<double?>("TaxAmount");

                    b.Property<double?>("TaxPercentage");

                    b.Property<double?>("TotalAmount");

                    b.Property<string>("VoucherNumber");

                    b.Property<double>("WihtholdingTaxAmount");

                    b.Property<double?>("WithholdingTaxPercentage");

                    b.HasKey("FinancePurchaseReturnId");

                    b.HasIndex("DetailAccountId");

                    b.ToTable("Finance_PurchaseReturn");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseReturnDetail", b =>
                {
                    b.Property<long?>("FinancePurchaseReturnDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<long?>("FinancePurchaseReturnId");

                    b.Property<string>("ItemDescription");

                    b.HasKey("FinancePurchaseReturnDetailId");

                    b.HasIndex("FinancePurchaseReturnId");

                    b.ToTable("Finance_PurchaseReturnDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesInvoice", b =>
                {
                    b.Property<long>("FinanceSalesInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillNumber");

                    b.Property<double?>("CreditDays");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<long?>("DetailAccountId");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountPercentage");

                    b.Property<double?>("Expenses");

                    b.Property<long?>("FinanceSalesReturnId");

                    b.Property<double?>("GstAmount");

                    b.Property<double?>("GstPercentage");

                    b.Property<string>("InvoiceNumber");

                    b.Property<double?>("TaxAmount");

                    b.Property<double?>("TaxPercentage");

                    b.Property<double?>("TotalAmount");

                    b.Property<string>("VoucherNumber");

                    b.Property<double>("WihtholdingTaxAmount");

                    b.Property<double?>("WithholdingTaxPercentage");

                    b.HasKey("FinanceSalesInvoiceId");

                    b.HasIndex("DetailAccountId");

                    b.HasIndex("FinanceSalesReturnId")
                        .IsUnique()
                        .HasFilter("[FinanceSalesReturnId] IS NOT NULL");

                    b.ToTable("Finance_SalesInvoice");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesInvoiceDetail", b =>
                {
                    b.Property<long>("FinanceSalesInvoiceDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<long?>("FinanceSalesInvoiceId");

                    b.Property<string>("ItemDescription");

                    b.HasKey("FinanceSalesInvoiceDetailId");

                    b.HasIndex("FinanceSalesInvoiceId");

                    b.ToTable("Finance_SalesInvoiceDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesReturn", b =>
                {
                    b.Property<long>("FinanceSalesReturnId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillNumber");

                    b.Property<double?>("CreditDays");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<long?>("DetailAccountId");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountPercentage");

                    b.Property<double?>("Expenses");

                    b.Property<long?>("FinanceSalesInvoiceId");

                    b.Property<double?>("GstAmount");

                    b.Property<double?>("GstPercentage");

                    b.Property<string>("InvoiceNumber");

                    b.Property<double?>("TaxAmount");

                    b.Property<double?>("TaxPercentage");

                    b.Property<double?>("TotalAmount");

                    b.Property<string>("VoucherNumber");

                    b.Property<double>("WihtholdingTaxAmount");

                    b.Property<double?>("WithholdingTaxPercentage");

                    b.HasKey("FinanceSalesReturnId");

                    b.HasIndex("DetailAccountId");

                    b.ToTable("Finance_SalesReturn");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesReturnDetail", b =>
                {
                    b.Property<long?>("FinanceSalesReturnDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<long?>("FinanceSalesReturnId");

                    b.Property<string>("ItemDescription");

                    b.HasKey("FinanceSalesReturnDetailId");

                    b.HasIndex("FinanceSalesReturnId");

                    b.ToTable("Finance_SalesReturnDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.Voucher", b =>
                {
                    b.Property<long>("VoucherId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<string>("ChequeNumber");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("FinancialYearId");

                    b.Property<bool?>("IsFinal");

                    b.Property<double?>("TotalCreditAmount");

                    b.Property<double?>("TotalDebitAmount");

                    b.Property<string>("VoucherCode");

                    b.Property<long?>("VoucherTypeId");

                    b.HasKey("VoucherId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Finance_Voucher");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.VoucherDetail", b =>
                {
                    b.Property<long>("VoucherDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("CreditAmount");

                    b.Property<double?>("DebitAmount");

                    b.Property<string>("DepartmentName");

                    b.Property<string>("Description");

                    b.Property<long?>("DetailAccountId");

                    b.Property<string>("UniqueName");

                    b.Property<long?>("VoucherId");

                    b.HasKey("VoucherDetailId");

                    b.HasIndex("DetailAccountId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Finance_VoucherDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.DetailAccount", b =>
                {
                    b.Property<long>("DetailAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("CurrentCreditAmount");

                    b.Property<double?>("CurrentDebitAmount");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DetailAccountCode");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<double?>("OpeningBalance");

                    b.Property<long?>("SecondSubAccountId");

                    b.Property<double?>("TotalCreditAmount");

                    b.Property<double?>("TotalDeitAmount");

                    b.HasKey("DetailAccountId");

                    b.HasIndex("SecondSubAccountId");

                    b.ToTable("Finance_Setup_DetailAccount");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.FinancialYear", b =>
                {
                    b.Property<long>("FinancialYearId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("FinancialYearId");

                    b.ToTable("Finance_Setup_FinancialYear");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.MasterAccount", b =>
                {
                    b.Property<long>("MasterAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("MasterAccountCode");

                    b.Property<string>("Name");

                    b.HasKey("MasterAccountId");

                    b.ToTable("Finance_Setup_MasterAccount");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.SecondSubAccount", b =>
                {
                    b.Property<long>("SecondSubAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("SecondSubAccountCode");

                    b.Property<long?>("SubAccountId");

                    b.HasKey("SecondSubAccountId");

                    b.HasIndex("SubAccountId");

                    b.ToTable("Finance_Setup_SecondSubAccount");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.SubAccount", b =>
                {
                    b.Property<long>("SubAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("MasterAccountId");

                    b.Property<string>("Name");

                    b.Property<string>("SubAccountCode");

                    b.HasKey("SubAccountId");

                    b.HasIndex("MasterAccountId");

                    b.ToTable("Finance_Setup_SubAccount");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.VoucherType", b =>
                {
                    b.Property<long>("VoucherTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("VoucherCode");

                    b.HasKey("VoucherTypeId");

                    b.ToTable("Finance_Setup_VoucherType");
                });

            modelBuilder.Entity("ErpCore.Entities.FreezePrepration", b =>
                {
                    b.Property<long>("FreezePreprationId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CannisterNumber");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<long?>("CollectionNumber");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DrawerNumber");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("FreezeDate");

                    b.Property<long?>("NoOfStrawFrozen");

                    b.Property<string>("Other");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<string>("PesaTese");

                    b.Property<string>("PlugColor");

                    b.Property<string>("Position");

                    b.Property<long?>("ProcedureNumber");

                    b.Property<string>("Remarks");

                    b.Property<long?>("SemenRefNumber");

                    b.Property<string>("StrawColor");

                    b.Property<long?>("StrawIdFrom");

                    b.Property<long?>("StrawIdTo");

                    b.Property<long?>("Suffix");

                    b.Property<double?>("Survival");

                    b.Property<string>("SurvivalRange");

                    b.Property<string>("Type");

                    b.HasKey("FreezePreprationId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.ToTable("Hims_FreezePrepration");
                });

            modelBuilder.Entity("ErpCore.Entities.GRN", b =>
                {
                    b.Property<long>("GRNId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("GrnDate");

                    b.Property<string>("GrnNumber");

                    b.Property<long?>("PurchaseInvoiceId");

                    b.Property<long?>("PurchaseOrderId");

                    b.Property<long?>("PurchaseReturnId");

                    b.Property<string>("Remarks");

                    b.Property<double?>("TotalDifferenceAmount");

                    b.Property<double?>("TotalDifferenceQuantity");

                    b.Property<double?>("TotalExpectedAmount");

                    b.Property<double?>("TotalExpectedQuantity");

                    b.Property<double?>("TotalPaymentAmount");

                    b.Property<double?>("TotalReceivedQuantity");

                    b.HasKey("GRNId");

                    b.HasIndex("PurchaseInvoiceId")
                        .IsUnique()
                        .HasFilter("[PurchaseInvoiceId] IS NOT NULL");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderId] IS NOT NULL");

                    b.ToTable("Inv_GRN");
                });

            modelBuilder.Entity("ErpCore.Entities.GrnItem", b =>
                {
                    b.Property<long>("GrnItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchNumber");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<double?>("DifferenceAmount");

                    b.Property<double?>("DifferenceQuantity");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("ExpectedAmount");

                    b.Property<double?>("ExpectedQuantity");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<long?>("GRNId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<string>("NumberPackType");

                    b.Property<double?>("PackSize");

                    b.Property<string>("PackType");

                    b.Property<double?>("PaymentAmount");

                    b.Property<double?>("Quantity");

                    b.Property<double?>("Rate");

                    b.Property<double?>("ReceivedQuantity");

                    b.HasKey("GrnItemId");

                    b.HasIndex("GRNId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("Inv_GRNItem");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.AppointmentTest", b =>
                {
                    b.Property<long?>("AppointmentId");

                    b.Property<long?>("TestId");

                    b.HasKey("AppointmentId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("Hims_AppointmentTest");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.BioChemistryTest", b =>
                {
                    b.Property<long>("BioChemistryTestId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.HasKey("BioChemistryTestId");

                    b.ToTable("Hims_BioChemistryTest");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Consultant", b =>
                {
                    b.Property<long>("ConsultantId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<double?>("Charges");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Specialization");

                    b.Property<string>("Title");

                    b.HasKey("ConsultantId");

                    b.ToTable("Hims_Consultant");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Diagnosis", b =>
                {
                    b.Property<long>("DiagnosisId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Symptoms");

                    b.HasKey("DiagnosisId");

                    b.ToTable("Hims_Diagnosis");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Embryologist", b =>
                {
                    b.Property<long>("EmbryologistId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("EmbryologistId");

                    b.ToTable("Hims_Embryologist");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.EmbryologyCode", b =>
                {
                    b.Property<long>("EmbryologyCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("EmbryologyCodeId");

                    b.ToTable("Hims_EmbryologyCode");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Event", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Days");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("Sequence");

                    b.Property<string>("Weeks");

                    b.HasKey("EventId");

                    b.ToTable("Hims_Event");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Medicine", b =>
                {
                    b.Property<long>("MedicineId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Dose");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Unit");

                    b.HasKey("MedicineId");

                    b.ToTable("Hims_Medicine");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Package", b =>
                {
                    b.Property<long>("PackageId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<double>("Charges");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<string>("PackageCode");

                    b.Property<string>("PackageName");

                    b.HasKey("PackageId");

                    b.ToTable("Hims_Package");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Protocol", b =>
                {
                    b.Property<long>("ProtocolId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("ProtocolId");

                    b.ToTable("Hims_Protocol");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.ReferenceRange", b =>
                {
                    b.Property<long>("ReferenceRangeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("RefRange");

                    b.HasKey("ReferenceRangeId");

                    b.ToTable("Hims_ReferenceRange");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Test", b =>
                {
                    b.Property<long>("TestId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<double?>("Charges");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("Days");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsLMP");

                    b.Property<bool?>("IsLabTest");

                    b.Property<long?>("TestCategoryId");

                    b.Property<string>("TestCode");

                    b.Property<string>("TestName");

                    b.Property<long?>("TestTypeId");

                    b.HasKey("TestId");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Hims_Test");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.TestCategory", b =>
                {
                    b.Property<long>("TestCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("TestCategoryId");

                    b.ToTable("Hims_TestCategory");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.TestType", b =>
                {
                    b.Property<long>("TestTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("TestTypeId");

                    b.ToTable("Hims_TestType");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.TestUnit", b =>
                {
                    b.Property<long>("TestUnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Unit");

                    b.HasKey("TestUnitId");

                    b.ToTable("Hims_TestUnit");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.TreatmentType", b =>
                {
                    b.Property<long>("TreatmentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbrv");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CycleType");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("TreatmentTypeId");

                    b.ToTable("Hims_TreatmentType");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.VisitNature", b =>
                {
                    b.Property<long>("VisitNatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Nature");

                    b.HasKey("VisitNatureId");

                    b.ToTable("Hims_VisitNature");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceFlagExemption", b =>
                {
                    b.Property<long>("AttendanceFlagExemptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttendanceFlagId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("FlagTypeId");

                    b.Property<string>("Remarks");

                    b.HasKey("AttendanceFlagExemptionId");

                    b.HasIndex("AttendanceFlagId");

                    b.HasIndex("FlagTypeId");

                    b.ToTable("Hr_Attendance_AttendanceFlagExemption");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceRule", b =>
                {
                    b.Property<long>("AttendanceRuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<long?>("AttendanceFlagId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ConditionalExemption");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("EffectFrequency");

                    b.Property<string>("EffectQuantity");

                    b.Property<string>("EffectType");

                    b.Property<string>("ExemptFlagCount");

                    b.Property<string>("ExemptMinutes");

                    b.Property<string>("FlagCount");

                    b.Property<long?>("GroupId");

                    b.HasKey("AttendanceRuleId");

                    b.HasIndex("AttendanceFlagId");

                    b.HasIndex("GroupId");

                    b.ToTable("Hr_Attendance_AttendanceRule");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceRuleLeaveType", b =>
                {
                    b.Property<long?>("AttendanceRuleId");

                    b.Property<long?>("LeaveTypeId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.HasKey("AttendanceRuleId", "LeaveTypeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("Hr_Attendance_AttendanceRuleLeaveType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.UserAttendanceFlagExemption", b =>
                {
                    b.Property<long?>("UserId");

                    b.Property<long?>("AttendanceFlagExemptionId");

                    b.HasKey("UserId", "AttendanceFlagExemptionId");

                    b.HasIndex("AttendanceFlagExemptionId");

                    b.ToTable("Hr_Attendance_UserAttendanceFlagExemption");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceRequest", b =>
                {
                    b.Property<long>("AttendanceRequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AssignRosterId");

                    b.Property<long?>("AttendanceRequestApproverId");

                    b.Property<long?>("AttendanceRequestTypeId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsRejected");

                    b.Property<bool?>("IsSubmitted");

                    b.Property<DateTime?>("RequestDate");

                    b.Property<long?>("UserId");

                    b.HasKey("AttendanceRequestId");

                    b.HasIndex("AssignRosterId");

                    b.HasIndex("AttendanceRequestApproverId");

                    b.HasIndex("AttendanceRequestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Attendance_AttendanceRequest");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRoster", b =>
                {
                    b.Property<long>("AssignRosterId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("FromDate");

                    b.Property<bool?>("IsDefaultRoster");

                    b.Property<string>("Month");

                    b.Property<long?>("RosterId");

                    b.Property<DateTime?>("ToDate");

                    b.Property<string>("Year");

                    b.HasKey("AssignRosterId");

                    b.HasIndex("RosterId");

                    b.ToTable("Hr_Attendance_AssignRoster");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRosterShift", b =>
                {
                    b.Property<long?>("AssignRosterId");

                    b.Property<long?>("ShiftId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.HasKey("AssignRosterId", "ShiftId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Hr_Attendance_AssignRosterShift");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceFlag", b =>
                {
                    b.Property<long>("AttendanceFlagId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("FlagCategoryId");

                    b.Property<string>("FlagDayType");

                    b.Property<long?>("FlagEffectTypeId");

                    b.Property<long?>("FlagTypeId");

                    b.Property<long?>("FlagValueId");

                    b.Property<DateTime?>("FromTime");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("NoOfHours");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("ToTime");

                    b.HasKey("AttendanceFlagId");

                    b.HasIndex("FlagCategoryId");

                    b.HasIndex("FlagEffectTypeId");

                    b.HasIndex("FlagTypeId");

                    b.HasIndex("FlagValueId");

                    b.ToTable("Hr_Attendance_AttendanceFlag");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceRequestApprover", b =>
                {
                    b.Property<long>("AttendanceRequestApproverId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("UserId");

                    b.HasKey("AttendanceRequestApproverId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Attendance_AttendanceRequestApprover");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceRequestType", b =>
                {
                    b.Property<long>("AttendanceRequestTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("AttendanceRequestTypeId");

                    b.ToTable("Hr_Attendance_AttendanceRequestType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagCategory", b =>
                {
                    b.Property<long>("FlagCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("FlagCategoryId");

                    b.ToTable("Hr_Attendance_FlagCategory");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagEffectType", b =>
                {
                    b.Property<long>("FlagEffectTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<double?>("Value");

                    b.HasKey("FlagEffectTypeId");

                    b.ToTable("Hr_Attendance_FlagEffectType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagType", b =>
                {
                    b.Property<long>("FlagTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("FlagTypeId");

                    b.ToTable("Hr_Attendance_FlagType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagValue", b =>
                {
                    b.Property<long>("FlagValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<double?>("Value");

                    b.HasKey("FlagValueId");

                    b.ToTable("Hr_Attendance_FlagValue");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.Roster", b =>
                {
                    b.Property<long>("RosterId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("RosterId");

                    b.ToTable("Hr_Attendance_Roster");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.Shift", b =>
                {
                    b.Property<long>("ShiftsId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Day");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Duties");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EndTime");

                    b.Property<DateTime?>("GraceTime");

                    b.Property<DateTime?>("InTimeShiftThreshold");

                    b.Property<bool?>("IsMultiple");

                    b.Property<DateTime?>("MinimumOverTime");

                    b.Property<DateTime?>("OutTimeShiftThreshold");

                    b.Property<double?>("OverTimeRate");

                    b.Property<DateTime?>("OverTimeStartTime");

                    b.Property<string>("ShiftCode");

                    b.Property<double?>("ShiftHours");

                    b.Property<string>("ShiftTitle");

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("ShiftsId");

                    b.ToTable("Hr_Attendance_Shift");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.UserRosterAttendanceAttendanceFlag", b =>
                {
                    b.Property<long?>("AttendanceFlagId");

                    b.Property<long?>("UserRosterAttendanceId");

                    b.Property<long?>("ShiftsId");

                    b.HasKey("AttendanceFlagId", "UserRosterAttendanceId");

                    b.HasIndex("ShiftsId");

                    b.HasIndex("UserRosterAttendanceId");

                    b.ToTable("Hr_Attendance_UserRosterAttendanceAttendanceFlag");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.EmployeeOverTimeEntitlement", b =>
                {
                    b.Property<long>("EmployeeOverTimeEntitlementId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmployeeIncomingOtId");

                    b.Property<long?>("EmployeeOffDayOtId");

                    b.Property<long?>("EmployeeOutgoingOtId");

                    b.Property<long?>("EmployeeWorkingDayOtId");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<long?>("UserId");

                    b.HasKey("EmployeeOverTimeEntitlementId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Attendance_EmployeeOverTimeEntitlement");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OfficialVisitEntry", b =>
                {
                    b.Property<long>("OfficialVisitEntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("FromDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("ToDate");

                    b.Property<long?>("UserId");

                    b.Property<long?>("UserRosterAttendanceId");

                    b.HasKey("OfficialVisitEntryId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRosterAttendanceId");

                    b.ToTable("Hr_Attendance_OfficialVisitEntry");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OverTimeEntitlement", b =>
                {
                    b.Property<long>("OverTimeEntitlementId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<long?>("OverTimeTypeId");

                    b.Property<long?>("UserId");

                    b.HasKey("OverTimeEntitlementId");

                    b.HasIndex("OverTimeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Attendance_OverTimeEntitlement");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeIncomingOt", b =>
                {
                    b.Property<long>("EmployeeIncomingOtId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmployeeOverTimeEntitlementId");

                    b.Property<double?>("IncomingOtHours");

                    b.Property<bool?>("IsIncludeOtIncoming");

                    b.Property<long?>("OverTimeTypeId");

                    b.HasKey("EmployeeIncomingOtId");

                    b.HasIndex("EmployeeOverTimeEntitlementId")
                        .IsUnique()
                        .HasFilter("[EmployeeOverTimeEntitlementId] IS NOT NULL");

                    b.HasIndex("OverTimeTypeId");

                    b.ToTable("Hr_Attendance_EmployeeIncomingOt");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeOffDayOt", b =>
                {
                    b.Property<long>("EmployeeOffDayOtId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmployeeOverTimeEntitlementId");

                    b.Property<bool?>("IsIncludeOtOff");

                    b.Property<double?>("OffOtHours");

                    b.Property<long?>("OverTimeTypeId");

                    b.HasKey("EmployeeOffDayOtId");

                    b.HasIndex("EmployeeOverTimeEntitlementId")
                        .IsUnique()
                        .HasFilter("[EmployeeOverTimeEntitlementId] IS NOT NULL");

                    b.HasIndex("OverTimeTypeId");

                    b.ToTable("Hr_Attendance_EmployeeOffDayOt");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeOutgoingOt", b =>
                {
                    b.Property<long>("EmployeeOutgoingOtId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmployeeOverTimeEntitlementId");

                    b.Property<bool?>("IsIncludeOtOutgoing");

                    b.Property<double?>("OutgoingOtHours");

                    b.Property<long?>("OverTimeTypeId");

                    b.HasKey("EmployeeOutgoingOtId");

                    b.HasIndex("EmployeeOverTimeEntitlementId")
                        .IsUnique()
                        .HasFilter("[EmployeeOverTimeEntitlementId] IS NOT NULL");

                    b.HasIndex("OverTimeTypeId");

                    b.ToTable("Hr_Attendance_EmployeeOutgoingOt");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeWorkingDayOt", b =>
                {
                    b.Property<long>("EmployeeWorkingDayOtId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmployeeOverTimeEntitlementId");

                    b.Property<bool?>("IsIncludeOtWorking");

                    b.Property<long?>("OverTimeTypeId");

                    b.Property<double?>("WokingOtHours");

                    b.HasKey("EmployeeWorkingDayOtId");

                    b.HasIndex("EmployeeOverTimeEntitlementId")
                        .IsUnique()
                        .HasFilter("[EmployeeOverTimeEntitlementId] IS NOT NULL");

                    b.HasIndex("OverTimeTypeId");

                    b.ToTable("Hr_Attendance_EmployeeWorkingDayOt");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeFlag", b =>
                {
                    b.Property<long>("OvertimeFlagId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("OvertimeFlagId");

                    b.ToTable("Hr_Attendance_OverTimeFlag");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", b =>
                {
                    b.Property<long>("OverTimeTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("OvertimeFlagId");

                    b.Property<string>("Title");

                    b.HasKey("OverTimeTypeId");

                    b.HasIndex("OvertimeFlagId");

                    b.ToTable("Hr_Attendance_OverTimeType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.UserRosterAttendance", b =>
                {
                    b.Property<long>("UserRosterAttendanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AssignRosterId");

                    b.Property<DateTime?>("AttendanceDate");

                    b.Property<long?>("BranchId");

                    b.Property<DateTime?>("CheckInTime");

                    b.Property<DateTime?>("CheckOutTime");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("HoursWorked");

                    b.Property<bool?>("IsOnLeave");

                    b.Property<bool?>("IsPresent");

                    b.Property<long?>("LeavePolicyEmployeeId");

                    b.Property<long?>("MonthlyUserSalaryId");

                    b.Property<long?>("UserId");

                    b.HasKey("UserRosterAttendanceId");

                    b.HasIndex("AssignRosterId");

                    b.HasIndex("LeavePolicyEmployeeId");

                    b.HasIndex("MonthlyUserSalaryId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Attendance_UserRosterAttendance");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveAdmin.LeaveOpening", b =>
                {
                    b.Property<long>("LeaveOpeningId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsProcessed");

                    b.Property<long?>("LeaveRequestId");

                    b.Property<long?>("LeaveYearId");

                    b.Property<string>("Remarks");

                    b.Property<long?>("UserId");

                    b.HasKey("LeaveOpeningId");

                    b.HasIndex("LeaveYearId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Leave_LeaveOpening");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveAdmin.LeaveOpeningDetail", b =>
                {
                    b.Property<long>("LeaveOpeningDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<long?>("LeaveOpeningId");

                    b.Property<long?>("LeaveTypeId");

                    b.Property<double?>("Quantity");

                    b.HasKey("LeaveOpeningDetailId");

                    b.HasIndex("LeaveOpeningId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("Hr_Leave_LeaveOpeningDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveAdmin.LeavePolicyEmployee", b =>
                {
                    b.Property<long>("LeavePolicyEmployeeWiseId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BalanceBroughtForwardQuantity");

                    b.Property<double?>("BalanceBroughtForwardValidity");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("DayContinuationRestriction");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("EncashmentApplicationLimit");

                    b.Property<double?>("EncashmentDays");

                    b.Property<double?>("EntitledQuantity");

                    b.Property<double?>("HalfPaidDaysQuantity");

                    b.Property<bool?>("IsAllowedOnlyOnceInService");

                    b.Property<bool?>("IsBalanceBroughtForward");

                    b.Property<bool?>("IsEncashable");

                    b.Property<bool?>("IsFemale");

                    b.Property<bool?>("IsFileAttachmentRequired");

                    b.Property<bool?>("IsJobPeriodBased");

                    b.Property<bool?>("IsMale");

                    b.Property<bool?>("IsMarried");

                    b.Property<bool?>("IsPeriodic");

                    b.Property<bool?>("IsProcessed");

                    b.Property<bool?>("IsProrated");

                    b.Property<bool?>("IsShortLeaveAllowed");

                    b.Property<double?>("JobPeriodTime");

                    b.Property<long?>("LeaveDayTypeId");

                    b.Property<long?>("LeaveEligibilityId");

                    b.Property<long?>("LeaveTypeId");

                    b.Property<long?>("LeaveYearId");

                    b.Property<double?>("MaximumAllowedBalance");

                    b.Property<double?>("MaximumAtATime");

                    b.Property<double?>("MinimumAtATime");

                    b.Property<double?>("MinimumIntimationPeriod");

                    b.Property<double?>("PaidDaysQuantity");

                    b.Property<DateTime?>("PeriodicFrom");

                    b.Property<DateTime?>("PeriodicTill");

                    b.Property<double?>("ShortLeaveLimit");

                    b.Property<double?>("UnPaidDaysQuantity");

                    b.Property<long?>("UserId");

                    b.HasKey("LeavePolicyEmployeeWiseId");

                    b.HasIndex("LeaveDayTypeId");

                    b.HasIndex("LeaveEligibilityId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("LeaveYearId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Leave_LeavePolicyEmployee");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveApproval", b =>
                {
                    b.Property<long>("LeaveApprovalId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsApproved");

                    b.Property<long?>("LeaveApproverId");

                    b.Property<long?>("LeaveClosingId");

                    b.Property<long?>("LeaveRequestId");

                    b.Property<string>("Name");

                    b.HasKey("LeaveApprovalId");

                    b.HasIndex("LeaveApproverId");

                    b.HasIndex("LeaveClosingId");

                    b.HasIndex("LeaveRequestId")
                        .IsUnique()
                        .HasFilter("[LeaveRequestId] IS NOT NULL");

                    b.ToTable("Hr_Leave_LeaveApproval");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveClosing", b =>
                {
                    b.Property<long>("LeaveClosingId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DepartmentId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GroupId");

                    b.Property<long?>("LeaveYearId");

                    b.HasKey("LeaveClosingId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LeaveYearId");

                    b.ToTable("Hr_Leave_LeaveClosing");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveRequest", b =>
                {
                    b.Property<long>("LeaveRequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsApproved");

                    b.Property<long?>("LeaveApprovalId");

                    b.Property<long?>("LeaveOpeningId");

                    b.Property<string>("LeaveRequestCode");

                    b.Property<DateTime?>("RequestDate");

                    b.Property<double?>("TotalLeaveValue");

                    b.Property<long?>("UserId");

                    b.HasKey("LeaveRequestId");

                    b.HasIndex("LeaveOpeningId")
                        .IsUnique()
                        .HasFilter("[LeaveOpeningId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Leave_LeaveRequest");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveRequestDetail", b =>
                {
                    b.Property<long>("LeaveRequestDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DateFrom");

                    b.Property<DateTime?>("DateTill");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FirstSecondHalf");

                    b.Property<bool?>("IsShortLeave");

                    b.Property<long?>("LeaveRequestId");

                    b.Property<long?>("LeaveTypeId");

                    b.Property<long?>("LeaveYearId");

                    b.Property<double?>("TotalLeaveDetailValue");

                    b.Property<double?>("Value");

                    b.HasKey("LeaveRequestDetailId");

                    b.HasIndex("LeaveRequestId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("LeaveYearId");

                    b.ToTable("Hr_Leave_LeaveRequestDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.DecimalRoundingMatrix", b =>
                {
                    b.Property<long>("DecimalRoundingMatrixId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("Effect");

                    b.Property<double?>("FromRange");

                    b.Property<long?>("LeavePolicyEmployeeId");

                    b.Property<long?>("LeavePolicyId");

                    b.Property<double?>("TillRange");

                    b.HasKey("DecimalRoundingMatrixId");

                    b.HasIndex("LeavePolicyEmployeeId");

                    b.HasIndex("LeavePolicyId");

                    b.ToTable("Hr_Leave_DecimalRoundingMatrix");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveApprover", b =>
                {
                    b.Property<long>("LeaveApproverId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("UserId");

                    b.HasKey("LeaveApproverId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Leave_LeaveApprover");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveDayType", b =>
                {
                    b.Property<long>("LeaveDayTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("LeaveDayTypeId");

                    b.ToTable("Hr_Leave_LeaveDayType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveEligibility", b =>
                {
                    b.Property<long>("LeaveEligibilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("LeaveEligibilityId");

                    b.ToTable("Hr_Leave_LeaveEligibility");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeavePolicy", b =>
                {
                    b.Property<long>("LeavePolicyId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AllowOnZeroBalance");

                    b.Property<double?>("ApplicationLimit");

                    b.Property<double?>("BalanceBroughtForwardQuantity");

                    b.Property<double?>("BalanceBroughtForwardValidity");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("DayContinuationRestriction");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("EncashmentApplicationLimit");

                    b.Property<double?>("EncashmentDays");

                    b.Property<double?>("EntitledQuantity");

                    b.Property<double?>("FileAttachmentDaysLimit");

                    b.Property<long?>("GroupId");

                    b.Property<double?>("HalfPaidDaysQuantity");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAllowedOnlyOnceInService");

                    b.Property<bool?>("IsBalanceBroughtForward");

                    b.Property<bool?>("IsEncashable");

                    b.Property<bool?>("IsFemale");

                    b.Property<bool?>("IsFileAttachmentRequired");

                    b.Property<bool?>("IsJobPeriodBased");

                    b.Property<bool?>("IsMale");

                    b.Property<bool?>("IsMarried");

                    b.Property<bool?>("IsMonthBased");

                    b.Property<bool?>("IsProcessed");

                    b.Property<bool?>("IsProrated");

                    b.Property<bool?>("IsShortLeaveAllowed");

                    b.Property<double?>("JobPeriodTime");

                    b.Property<long?>("LeaveDayTypeId");

                    b.Property<long?>("LeaveEligibilityId");

                    b.Property<long?>("LeaveTypeId");

                    b.Property<long?>("LeaveYearId");

                    b.Property<double?>("MaximumAllowedBalance");

                    b.Property<double?>("MaximumAtATime");

                    b.Property<double?>("MinimumAtATime");

                    b.Property<double?>("MinimumIntimationPeriod");

                    b.Property<double?>("PaidDaysQuantity");

                    b.Property<bool?>("PrintOnPaySlip");

                    b.Property<double?>("ShortLeaveLimit");

                    b.Property<double?>("UnPaidDaysQuantity");

                    b.HasKey("LeavePolicyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LeaveDayTypeId");

                    b.HasIndex("LeaveEligibilityId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("LeaveYearId");

                    b.ToTable("Hr_Leave_LeavePolicy");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeavePurpose", b =>
                {
                    b.Property<long>("LeavePurposeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Title");

                    b.HasKey("LeavePurposeId");

                    b.ToTable("Hr_Leave_LeavePurpose");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveSubType", b =>
                {
                    b.Property<long>("LeaveSubTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("LeaveSubTypeId");

                    b.ToTable("Hr_Leave_LeaveSubType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", b =>
                {
                    b.Property<long>("LeaveTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("DayCost");

                    b.Property<double?>("DayPrice");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsActive");

                    b.Property<long?>("LeaveSubTypeId");

                    b.Property<string>("Prefix");

                    b.Property<string>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("LeaveTypeId");

                    b.HasIndex("LeaveSubTypeId");

                    b.ToTable("Hr_Leave_LeaveType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveTypeBalance", b =>
                {
                    b.Property<long>("LeaveTypeBalanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BalanceValue");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("LeaveTypeId");

                    b.Property<long?>("UserId");

                    b.HasKey("LeaveTypeBalanceId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Leave_LeaveTypeBalance");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveYear", b =>
                {
                    b.Property<long>("LeaveYearId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("IsCurrentYear");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Year");

                    b.HasKey("LeaveYearId");

                    b.ToTable("Hr_Leave_LeaveYear");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.ProrateMatrix", b =>
                {
                    b.Property<long>("ProrateMatrixId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("From");

                    b.Property<long?>("LeavePolicyEmployeeId");

                    b.Property<long?>("LeavePolicyId");

                    b.Property<double?>("Percentage");

                    b.Property<double?>("Till");

                    b.HasKey("ProrateMatrixId");

                    b.HasIndex("LeavePolicyEmployeeId");

                    b.HasIndex("LeavePolicyId");

                    b.ToTable("Hr_Leave_ProrateMatrix");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.Gratuity", b =>
                {
                    b.Property<long>("UserGratuityId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<DateTime?>("From");

                    b.Property<long?>("FundSetupId");

                    b.Property<double?>("GratuityAmount");

                    b.Property<long?>("GratuityTypeId");

                    b.Property<long?>("LeavingReasonId");

                    b.Property<DateTime?>("To");

                    b.Property<double?>("TotalSalary");

                    b.Property<long?>("UserId");

                    b.HasKey("UserGratuityId");

                    b.HasIndex("FundSetupId");

                    b.HasIndex("GratuityTypeId");

                    b.HasIndex("LeavingReasonId");

                    b.ToTable("Hr_Payroll_Gratuity");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.LoanSetup.LoanType", b =>
                {
                    b.Property<long>("LoanTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("MaxAmount");

                    b.Property<double?>("MaxInstallment");

                    b.Property<long?>("MaxPaymentPeriod");

                    b.Property<double?>("MinAmount");

                    b.Property<double?>("MinInstallment");

                    b.Property<long?>("MinPaymentPeriod");

                    b.Property<string>("Name");

                    b.HasKey("LoanTypeId");

                    b.ToTable("Hr_Loan_LoanType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.LoanSetup.UserLoan", b =>
                {
                    b.Property<long>("UserLoanId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<double?>("AmountLeft");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("DeductionPercent");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EndMonth");

                    b.Property<double?>("Installment");

                    b.Property<bool?>("IsPaid");

                    b.Property<double?>("LastPaidAmount");

                    b.Property<DateTime?>("LastPaymentDate");

                    b.Property<long?>("LoanTypeId");

                    b.Property<double?>("PaidTillNow");

                    b.Property<DateTime?>("StartMonth");

                    b.Property<long?>("UserId");

                    b.HasKey("UserLoanId");

                    b.HasIndex("LoanTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Loan_UserLoan");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.LoanSetup.UserLoanPayslip", b =>
                {
                    b.Property<long?>("PayslipId");

                    b.Property<long?>("UserLoanId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.HasKey("PayslipId", "UserLoanId");

                    b.HasIndex("UserLoanId");

                    b.ToTable("Hr_Loan_UserLoanPayslip");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.MonthlyUserSalary", b =>
                {
                    b.Property<long>("MonthlyUserSalaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AbsentDays");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsStopped");

                    b.Property<long?>("LeaveDays");

                    b.Property<DateTime?>("MonthEndDate");

                    b.Property<DateTime?>("MonthStartDate");

                    b.Property<double?>("OvertimeHours");

                    b.Property<long?>("PayrollId");

                    b.Property<long?>("PayslipId");

                    b.Property<long?>("PfPaymentId");

                    b.Property<long?>("PresentDays");

                    b.Property<DateTime?>("StopFrom");

                    b.Property<long?>("StopSalaryId");

                    b.Property<DateTime?>("StopTill");

                    b.Property<long?>("TotalWorkingDaysInMonth");

                    b.Property<long?>("UserSalaryId");

                    b.HasKey("MonthlyUserSalaryId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("PfPaymentId");

                    b.HasIndex("StopSalaryId");

                    b.HasIndex("UserSalaryId");

                    b.ToTable("Hr_Payroll_MonthlyUserSalary");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollAdmin.StopSalary", b =>
                {
                    b.Property<long>("StopSalaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("From");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("Till");

                    b.HasKey("StopSalaryId");

                    b.HasIndex("PayrollTypeId");

                    b.ToTable("Hr_Payroll_StopSalary");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Allowance", b =>
                {
                    b.Property<long>("AllowanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AllowanceDeductionId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsDefaultAllowance");

                    b.Property<string>("Name");

                    b.HasKey("AllowanceId");

                    b.HasIndex("AllowanceDeductionId");

                    b.ToTable("Hr_Payroll_Allowance");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceArrear", b =>
                {
                    b.Property<long>("ArrearAllowanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ArrearAllowanceId");

                    b.ToTable("Hr_Payroll_AllowanceArrear");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceCalculationType", b =>
                {
                    b.Property<long>("AllowanceCalculationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("AllowanceCalculationTypeId");

                    b.ToTable("Hr_Payroll_AllowanceCalculationType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceDeduction", b =>
                {
                    b.Property<long>("AllowanceDeductionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AllowanceArrearArrearAllowanceId");

                    b.Property<long?>("AllowanceCalculationTypeId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CalculationSequenceNumber");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("DefaultCostCenter");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("FixedValue");

                    b.Property<string>("GlCodeAllowance");

                    b.Property<string>("GlCodeDeduction");

                    b.Property<bool?>("IsBaseAllowance");

                    b.Property<bool?>("IsGrossSalary");

                    b.Property<bool?>("IsOneTimeAllowance");

                    b.Property<bool?>("IsProrated");

                    b.Property<long?>("RepostNumber");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<string>("ValueExpressionForecast");

                    b.Property<string>("ValueExpressionForecastFrom");

                    b.Property<string>("ValueExpressionPayment");

                    b.Property<string>("ValueExpressionPaymentFrom");

                    b.HasKey("AllowanceDeductionId");

                    b.HasIndex("AllowanceArrearArrearAllowanceId");

                    b.HasIndex("AllowanceCalculationTypeId");

                    b.ToTable("Hr_Payroll_AllowanceDeduction");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceRate", b =>
                {
                    b.Property<long>("AllowanceRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AllowanceId");

                    b.Property<long?>("AllowanceRateValue");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EffectiveDate");

                    b.HasKey("AllowanceRateId");

                    b.HasIndex("AllowanceId");

                    b.ToTable("Hr_Payroll_AllowanceRate");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.BankAdviceTemplate", b =>
                {
                    b.Property<long>("BankAdviceTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("BankAdviceTemplateId");

                    b.ToTable("Hr_Payroll_BankAdviceTemplate");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Benefit", b =>
                {
                    b.Property<long>("BenefitId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("BenefitId");

                    b.ToTable("Hr_Payroll_Benefit");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.ChequeTemplate", b =>
                {
                    b.Property<long>("ChequeTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ChequeTemplateId");

                    b.ToTable("Hr_Payroll_ChequeTemplate");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.CompensationTransaction", b =>
                {
                    b.Property<long>("CompensationTransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AllowanceId");

                    b.Property<double?>("Amount");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsTaxableIncome");

                    b.Property<DateTime?>("Month");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<long?>("PayrollyearId");

                    b.Property<string>("Remarks");

                    b.Property<long?>("UserId");

                    b.HasKey("CompensationTransactionId");

                    b.HasIndex("AllowanceId");

                    b.HasIndex("PayrollTypeId");

                    b.HasIndex("PayrollyearId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Payroll_CompensationTransaction");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Currency", b =>
                {
                    b.Property<long>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("ExchangeRate");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsBase");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<long?>("RoundOff");

                    b.HasKey("CurrencyId");

                    b.ToTable("Hr_Payroll_Currency");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Frequency", b =>
                {
                    b.Property<long>("FrequencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Days");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("FrequencyId");

                    b.ToTable("Hr_Payroll_Frequency");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.FundSetup", b =>
                {
                    b.Property<long>("FundSetupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicableFrom");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("EobiEmployeeContribution");

                    b.Property<double?>("EobiEmployerContribution");

                    b.Property<double?>("EobiMinimumSalary");

                    b.Property<long?>("ExemptAge");

                    b.Property<double?>("IessiEmployeeContribution");

                    b.Property<double?>("IessiEmployerContribution");

                    b.Property<double?>("IessiMinimumSalary");

                    b.Property<double?>("MaximumContribution");

                    b.Property<long?>("MinServicePeriod");

                    b.Property<long?>("PayrollYearId");

                    b.Property<double?>("PessiEmployeeContribution");

                    b.Property<double?>("PessiEmployerContribution");

                    b.Property<double?>("PessiMinimumSalary");

                    b.Property<double?>("PfEmployeeContribution");

                    b.Property<double?>("PfEmployerContribution");

                    b.Property<double?>("SessiEmployeeContribution");

                    b.Property<double?>("SessiEmployerContribution");

                    b.Property<double?>("SessiMinimumSalary");

                    b.Property<double?>("TaxableAmountLimit");

                    b.HasKey("FundSetupId");

                    b.HasIndex("PayrollYearId");

                    b.ToTable("Hr_Payroll_FundSetup");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.GratuitySlab", b =>
                {
                    b.Property<long?>("GratuitySlabId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmploymentDaysFrom");

                    b.Property<long?>("EmploymentDaysTill");

                    b.Property<double?>("MultiplicationFactor");

                    b.Property<string>("Title");

                    b.HasKey("GratuitySlabId");

                    b.ToTable("Hr_Payroll_GratuitySlab");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.GratuitySlabGratuity", b =>
                {
                    b.Property<long>("GratuitySlabGratuityId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GratuityId");

                    b.Property<long?>("GratuitySlabId");

                    b.Property<double?>("SlabAmount");

                    b.HasKey("GratuitySlabGratuityId");

                    b.HasIndex("GratuityId");

                    b.HasIndex("GratuitySlabId");

                    b.ToTable("Hr_Payroll_GratuitySlabGratuity");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.GratuityType", b =>
                {
                    b.Property<long>("GratuityTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("GratuityTypeId");

                    b.ToTable("Hr_Payroll_GratuityType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.LeavingReason", b =>
                {
                    b.Property<long>("LeavingReasonId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("LeavingReasonId");

                    b.ToTable("Hr_Payroll_LeavingReason");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayroll", b =>
                {
                    b.Property<long>("MasterPayrollId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BankId");

                    b.Property<string>("BankTransferCode");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<long?>("CurrencyId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.HasKey("MasterPayrollId");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Hr_Payroll_MasterPayroll");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayrollDetails", b =>
                {
                    b.Property<long>("MasterPayrollDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AllowanceId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("FrequencyId");

                    b.Property<long?>("MasterPayrollId");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<double>("Value");

                    b.HasKey("MasterPayrollDetailsId");

                    b.HasIndex("AllowanceId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("MasterPayrollId");

                    b.HasIndex("PayrollTypeId");

                    b.ToTable("Hr_Payroll_MasterPayrollDetails");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Payroll", b =>
                {
                    b.Property<long>("PayrollId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("HourlySalary");

                    b.Property<string>("IncrementInterval");

                    b.Property<double?>("IncrementPercentage");

                    b.Property<long?>("MasterPayrollId");

                    b.Property<double?>("MonthlySalary");

                    b.Property<long?>("UserId");

                    b.HasKey("PayrollId");

                    b.ToTable("Hr_Payroll_Payroll");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollBank", b =>
                {
                    b.Property<long?>("PayrollBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<bool?>("Active");

                    b.Property<long?>("BankAdviceTemplateId");

                    b.Property<string>("BankCode");

                    b.Property<long?>("BankId");

                    b.Property<string>("BankTitle");

                    b.Property<string>("Branch");

                    b.Property<string>("BranchAddress");

                    b.Property<string>("BranchCode");

                    b.Property<string>("BranchContactNumber");

                    b.Property<string>("BranchEmplyeeDesignation");

                    b.Property<string>("BranchEmplyeeName");

                    b.Property<long?>("BranchId");

                    b.Property<long>("ChequeTemplateId");

                    b.Property<long?>("CityId");

                    b.Property<bool?>("CompanyBank");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("CostCentreCode");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FirstApproverDesignation");

                    b.Property<string>("FirstApproverName");

                    b.Property<string>("GlCode");

                    b.Property<string>("RemitCode");

                    b.Property<string>("RemitKey");

                    b.Property<string>("RemitType");

                    b.Property<string>("RoutingCode");

                    b.Property<string>("SecondApproverDesignation");

                    b.Property<string>("SecondApproverName");

                    b.Property<string>("SwiftCode");

                    b.Property<string>("UniqueId");

                    b.HasKey("PayrollBankId");

                    b.HasIndex("BankAdviceTemplateId");

                    b.HasIndex("BankId");

                    b.HasIndex("ChequeTemplateId");

                    b.ToTable("Hr_Payroll_PayrollBank");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", b =>
                {
                    b.Property<long>("PayrollTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("PayrollTypeId");

                    b.ToTable("Hr_Payroll_PayrollType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollYear", b =>
                {
                    b.Property<long>("PayrollYearId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("From");

                    b.Property<bool?>("IsCurrent");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Till");

                    b.HasKey("PayrollYearId");

                    b.ToTable("Hr_Payroll_PayrollYear");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.PfPayment", b =>
                {
                    b.Property<long>("PfPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("FundSetupId");

                    b.Property<bool?>("IsEmployeeContribution");

                    b.Property<bool?>("IsEmployerContribution");

                    b.Property<DateTime?>("LastAddedDate");

                    b.Property<double?>("LastestEmployeePfContribution");

                    b.Property<double?>("LastestTotalPfAmount");

                    b.Property<double?>("LatestEmployerPfContribution");

                    b.Property<long?>("LeavingReasonId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<double?>("TotalEmployeePfContribution");

                    b.Property<double?>("TotalEmployerPfContribution");

                    b.Property<long?>("UserId");

                    b.HasKey("PfPaymentId");

                    b.HasIndex("FundSetupId");

                    b.HasIndex("LeavingReasonId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Hr_Payroll_PfPayment");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryCalculationType", b =>
                {
                    b.Property<long>("SalaryCalculationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("SalaryCalculationTypeId");

                    b.ToTable("Hr_Payroll_SalaryCalculationType");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryStructure", b =>
                {
                    b.Property<long>("SalaryStructureId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GroupId");

                    b.Property<bool?>("IsHourlyPay");

                    b.Property<double?>("MaximumSalary");

                    b.Property<double?>("MinimumSalary");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<double?>("PerHourPay");

                    b.Property<string>("Title");

                    b.HasKey("SalaryStructureId");

                    b.HasIndex("PayrollTypeId");

                    b.ToTable("Hr_Payroll_SalaryStructure");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryStructureDetail", b =>
                {
                    b.Property<long>("SalaryStructureDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AllowanceId");

                    b.Property<double?>("BaseSalary");

                    b.Property<long?>("BenefitId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Formula");

                    b.Property<bool?>("IsAllowanceOrBenefit");

                    b.Property<long?>("SalaryCalculationTypeId");

                    b.Property<long?>("SalaryStructureId");

                    b.Property<double?>("Value");

                    b.HasKey("SalaryStructureDetailId");

                    b.HasIndex("AllowanceId");

                    b.HasIndex("BenefitId");

                    b.HasIndex("SalaryCalculationTypeId");

                    b.HasIndex("SalaryStructureId");

                    b.ToTable("Hr_Payroll_SalaryStructureDetail");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.UserSalary", b =>
                {
                    b.Property<long>("UserSalaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GratuityUserGratuityId");

                    b.Property<long?>("GroupId");

                    b.Property<long?>("IncomeTaxRuleId");

                    b.Property<double?>("Salary");

                    b.Property<DateTime?>("SalaryDate");

                    b.Property<DateTime?>("SalaryMonth");

                    b.Property<DateTime?>("SalaryYear");

                    b.Property<long?>("UserId");

                    b.HasKey("UserSalaryId");

                    b.HasIndex("GratuityUserGratuityId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IncomeTaxRuleId");

                    b.ToTable("Hr_Payroll_UserSalary");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.IncomeTaxRule", b =>
                {
                    b.Property<long>("IncomeTaxRuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AgeLimit");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("ExemptPercentage");

                    b.Property<long?>("PayrollYearId");

                    b.Property<string>("PersonalExemption");

                    b.Property<double?>("TaxLimit");

                    b.Property<double?>("TaxRebateAmount");

                    b.Property<double?>("TaxRebatePercentage");

                    b.HasKey("IncomeTaxRuleId");

                    b.HasIndex("PayrollYearId");

                    b.ToTable("Hr_Payroll_IncomeTaxRule");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxableIncomeAdjustment", b =>
                {
                    b.Property<long>("TaxableIncomeAdjustmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AddAmount");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("DeductAmount");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<long?>("GroupId");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<string>("Remarks");

                    b.Property<long?>("TaxAdjustmentReasonId");

                    b.Property<long?>("TaxYearId");

                    b.Property<long?>("UserId");

                    b.HasKey("TaxableIncomeAdjustmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PayrollTypeId");

                    b.HasIndex("TaxAdjustmentReasonId");

                    b.HasIndex("TaxYearId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Payroll_TaxableIncomeAdjustment");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxAdjustmentReason", b =>
                {
                    b.Property<long>("taxAdjustmentReasonId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("taxAdjustmentReasonId");

                    b.ToTable("Hr_Payroll_TaxAdjustmentReason");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxBenefit", b =>
                {
                    b.Property<long>("TaxBenefitId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BaseAmount");

                    b.Property<long?>("BenefitId");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<DateTime?>("From");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<double?>("Percentage");

                    b.Property<double?>("PeriodTaxableAmount");

                    b.Property<string>("Remarks");

                    b.Property<long?>("TaxYearId");

                    b.Property<double?>("TaxableAmount");

                    b.Property<DateTime?>("Till");

                    b.HasKey("TaxBenefitId");

                    b.HasIndex("BenefitId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PayrollTypeId");

                    b.HasIndex("TaxYearId");

                    b.ToTable("Hr_Payroll_TaxBenefit");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxRelief", b =>
                {
                    b.Property<long>("TaxReliefId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicabaleTo");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("From");

                    b.Property<long?>("IncomeTaxRuleId");

                    b.Property<string>("TaxType");

                    b.Property<DateTime?>("Till");

                    b.Property<double?>("Value");

                    b.HasKey("TaxReliefId");

                    b.HasIndex("IncomeTaxRuleId");

                    b.ToTable("Hr_Payroll_TaxRelief");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxSchedule", b =>
                {
                    b.Property<long>("TaxScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicabaleTo");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("FixedValue");

                    b.Property<DateTime?>("From");

                    b.Property<long?>("IncomeTaxRuleId");

                    b.Property<string>("TaxType");

                    b.Property<DateTime?>("Till");

                    b.Property<double?>("Value");

                    b.HasKey("TaxScheduleId");

                    b.HasIndex("IncomeTaxRuleId");

                    b.ToTable("Hr_Payroll_TaxSchedule");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxYear", b =>
                {
                    b.Property<long>("TaxYearId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("From");

                    b.Property<bool?>("IsCurrent");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Till");

                    b.HasKey("TaxYearId");

                    b.ToTable("Hr_Payroll_TaxYear");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.PaySlip", b =>
                {
                    b.Property<long>("PaySlipid")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("Days");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("From");

                    b.Property<double?>("GrossAmount");

                    b.Property<double?>("Hours");

                    b.Property<double?>("LoanDeductionAmount");

                    b.Property<long?>("MonthlyUserSalaryId");

                    b.Property<double?>("NetAmount");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<double?>("PfDeductionAmount");

                    b.Property<double?>("TaxAmount");

                    b.Property<DateTime?>("Till");

                    b.Property<long?>("UserId");

                    b.HasKey("PaySlipid");

                    b.HasIndex("MonthlyUserSalaryId")
                        .IsUnique()
                        .HasFilter("[MonthlyUserSalaryId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Payroll_PaySlip");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.TaxAdjustment", b =>
                {
                    b.Property<long>("TaxAdjustmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdjustmentType");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<double?>("InvestmentAmount");

                    b.Property<long?>("PayrollTypeId");

                    b.Property<string>("Remarks");

                    b.Property<long?>("TaxAdjustmentReasonId");

                    b.Property<long?>("TaxYearId");

                    b.Property<DateTime?>("TransactionDate");

                    b.Property<long?>("UserId");

                    b.HasKey("TaxAdjustmentId");

                    b.HasIndex("PayrollTypeId");

                    b.HasIndex("TaxAdjustmentReasonId");

                    b.HasIndex("TaxYearId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Payroll_TaxAdjustment");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Bank", b =>
                {
                    b.Property<long?>("BankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNumber");

                    b.Property<string>("BankCode");

                    b.Property<string>("BankTitle");

                    b.Property<string>("Branch");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("RoutingCode");

                    b.Property<string>("SwiftCode");

                    b.Property<long?>("UserId");

                    b.HasKey("BankId");

                    b.ToTable("Hr_Bank");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.CostCenter", b =>
                {
                    b.Property<long>("CostCenterId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<decimal?>("CostCenterCode");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<decimal?>("ProfitCenterCode");

                    b.HasKey("CostCenterId");

                    b.ToTable("Hr_CostCenter");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Degree", b =>
                {
                    b.Property<long>("DegreeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("DegreeId");

                    b.ToTable("Hr_Degree");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Designation", b =>
                {
                    b.Property<long>("DesignationId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("DesignationId");

                    b.ToTable("Hr_Designation");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.EmployeeStatus", b =>
                {
                    b.Property<long>("EmployeeStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("EmployeeStatusId");

                    b.ToTable("Hr_EmployeeStatus");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.EmployeeType", b =>
                {
                    b.Property<long>("EmployeeTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("Hr_EmployeeType");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Function", b =>
                {
                    b.Property<long>("FunctionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("FunctionId");

                    b.ToTable("Hr_Function");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.GazettedHolidays", b =>
                {
                    b.Property<long>("GazettedHolidaysId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("HolidayDate");

                    b.Property<string>("Name");

                    b.Property<string>("Remarks");

                    b.Property<long?>("UserId");

                    b.HasKey("GazettedHolidaysId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_GazettedHolidays");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Group", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<int?>("ConfirmDueDays");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("SalaryStructureId");

                    b.HasKey("GroupId");

                    b.HasIndex("SalaryStructureId")
                        .IsUnique()
                        .HasFilter("[SalaryStructureId] IS NOT NULL");

                    b.ToTable("Hr_Group");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("LanguageId");

                    b.ToTable("Hr_Language");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.ManagementLevel", b =>
                {
                    b.Property<long>("ManagementLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ManagementLevelId");

                    b.ToTable("Hr_ManagementLevel");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Relation", b =>
                {
                    b.Property<long>("RelationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long?>("BranchId");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PermanentAddress");

                    b.Property<string>("Phone");

                    b.Property<string>("Province");

                    b.Property<long?>("UserId");

                    b.Property<string>("ZipCode");

                    b.HasKey("RelationId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_Relation");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Religion", b =>
                {
                    b.Property<long>("ReligionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ReligionId");

                    b.ToTable("Hr_Religion");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.SkillLevel", b =>
                {
                    b.Property<long>("SkillLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("UniversityId");

                    b.HasKey("SkillLevelId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Hr_SkillLevel");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.University", b =>
                {
                    b.Property<long>("UniversityId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<string>("Courses");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<long?>("DegreeId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Grade");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("TimeFrom");

                    b.Property<DateTime?>("TimeTo");

                    b.Property<long?>("UserId");

                    b.HasKey("UniversityId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_University");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserCompany", b =>
                {
                    b.Property<long>("UserCompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<DateTime?>("AppraisalConfirmDate");

                    b.Property<string>("Approver");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<DateTime?>("ConfirmationDate");

                    b.Property<DateTime?>("ConfirmationDueDate");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DesignationId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("EmployeeStatusId");

                    b.Property<long?>("EmployeeTypeId");

                    b.Property<long?>("FunctionId");

                    b.Property<DateTime?>("LeavingDate");

                    b.Property<string>("LeavingReason");

                    b.Property<long?>("ManagementLevelId");

                    b.Property<DateTime?>("NextAppraisalDate");

                    b.Property<DateTime?>("ResignDate");

                    b.Property<long?>("UserId");

                    b.HasKey("UserCompanyId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("ManagementLevelId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Hr_UserCompany");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserDocument", b =>
                {
                    b.Property<long>("UserDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DocumentName");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FilePath");

                    b.Property<string>("Remarks");

                    b.Property<long?>("UserId");

                    b.HasKey("UserDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_UserDocument");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserLanguage", b =>
                {
                    b.Property<long?>("LanguageId");

                    b.Property<long?>("UserId");

                    b.HasKey("LanguageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_UserLanguage");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserPhoto", b =>
                {
                    b.Property<long>("UserPhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FilePath");

                    b.Property<string>("Name");

                    b.Property<string>("Remarks");

                    b.Property<long?>("UserId");

                    b.HasKey("UserPhotoId");

                    b.ToTable("Hr_UserPhoto");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.WorkExperience", b =>
                {
                    b.Property<long?>("WorkExperienceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Company");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Designation");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime>("TimeFrom");

                    b.Property<DateTime>("TimeTo");

                    b.Property<long?>("UserId");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("UserId");

                    b.ToTable("Hr_WorkExperience");
                });

            modelBuilder.Entity("ErpCore.Entities.InseminationPrep", b =>
                {
                    b.Property<long>("InseminationPrepId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<long?>("CollectionNumber");

                    b.Property<string>("Comments");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("FinalVolume");

                    b.Property<DateTime?>("InsemenationDate");

                    b.Property<string>("Method");

                    b.Property<double?>("MotileCount");

                    b.Property<string>("MotileCountRange");

                    b.Property<long?>("NonLinearProgression");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<string>("PrepFor");

                    b.Property<string>("ProcedureNumber");

                    b.Property<long?>("RapidLinearProgression");

                    b.Property<string>("SampleType");

                    b.Property<string>("SpecialComment");

                    b.Property<string>("TimeCompleted");

                    b.Property<double?>("TotalCount");

                    b.Property<string>("TotalCountRange");

                    b.Property<double?>("Volume");

                    b.HasKey("InseminationPrepId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.ToTable("Hims_InseminationPrep");
                });

            modelBuilder.Entity("ErpCore.Entities.Inventory", b =>
                {
                    b.Property<long>("InventoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryItemId");

                    b.Property<double?>("StockQuantity");

                    b.HasKey("InventoryId");

                    b.HasIndex("InventoryItemId")
                        .IsUnique()
                        .HasFilter("[InventoryItemId] IS NOT NULL");

                    b.ToTable("Inv_Inventory");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Area", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long?>("RegionId");

                    b.HasKey("AreaId");

                    b.HasIndex("RegionId");

                    b.ToTable("Inv_Setup_Area");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Brand", b =>
                {
                    b.Property<long>("BrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<bool?>("ShowInNsv");

                    b.HasKey("BrandId");

                    b.ToTable("Inv_Setup_Brand");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Comission", b =>
                {
                    b.Property<long>("ComissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<double?>("Percentage");

                    b.HasKey("ComissionId");

                    b.ToTable("Inv_Setup_Comission");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double?>("AgreedInvestment");

                    b.Property<long?>("BranchId");

                    b.Property<string>("CRN");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<string>("Cnic");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<double?>("CreditDays");

                    b.Property<double?>("CreditLimit");

                    b.Property<long?>("CustomerTypeId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("GroupName");

                    b.Property<bool?>("IsBedDebt");

                    b.Property<bool?>("IsBranch");

                    b.Property<bool?>("IsChargeBardana");

                    b.Property<bool?>("IsHeadQuater");

                    b.Property<bool?>("IsSecurityDeposit");

                    b.Property<bool?>("IsShowDn");

                    b.Property<bool?>("IsShowReceivables");

                    b.Property<string>("LandlineNumber");

                    b.Property<string>("MobilerNumber");

                    b.Property<long?>("ModeOfPaymentId");

                    b.Property<string>("Name");

                    b.Property<string>("Nature");

                    b.Property<string>("Ntn");

                    b.Property<DateTime?>("RegDate");

                    b.Property<long?>("SalesPersonId");

                    b.Property<string>("ShortName");

                    b.Property<long?>("StNumber");

                    b.Property<string>("Status");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("ModeOfPaymentId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Inv_Setup_Customer");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerAccount", b =>
                {
                    b.Property<long>("CustomerAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode");

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountTitle");

                    b.Property<bool?>("Active");

                    b.Property<string>("Branch");

                    b.Property<string>("BranchAddress");

                    b.Property<string>("BranchCode");

                    b.Property<string>("BranchContactNumber");

                    b.Property<long?>("CustomerTypeId");

                    b.Property<string>("GlCode");

                    b.Property<string>("Name");

                    b.Property<string>("RemitCode");

                    b.Property<string>("RemitKey");

                    b.Property<string>("RemitType");

                    b.Property<string>("RoutingCode");

                    b.Property<string>("SwiftCode");

                    b.Property<string>("UniqueId");

                    b.HasKey("CustomerAccountId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Inv_Setup_CustomerAccount");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerBank", b =>
                {
                    b.Property<long?>("CustomerBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<bool?>("Active");

                    b.Property<string>("BankCode");

                    b.Property<string>("BankTitle");

                    b.Property<string>("Branch");

                    b.Property<string>("BranchAddress");

                    b.Property<string>("BranchCode");

                    b.Property<string>("BranchContactNumber");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<long?>("CustomerTypeId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("GlCode");

                    b.Property<string>("Name");

                    b.Property<string>("RemitCode");

                    b.Property<string>("RemitKey");

                    b.Property<string>("RemitType");

                    b.Property<string>("RoutingCode");

                    b.Property<string>("SwiftCode");

                    b.Property<string>("UniqueId");

                    b.HasKey("CustomerBankId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Inv_Setup_CustomerBank");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerPricePickLevel", b =>
                {
                    b.Property<long>("CustomerPricePickLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CustomerTypeId");

                    b.Property<string>("Name");

                    b.Property<double?>("Value");

                    b.HasKey("CustomerPricePickLevelId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Inv_Setup_CustomerPricePickLevel");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerType", b =>
                {
                    b.Property<long>("CustomerTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long?>("BranchId");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("LandlineNumber");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("Inv_Setup_CustomerType");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerWarehouse", b =>
                {
                    b.Property<long>("CustomerWarehouseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<long?>("CustomerTypeId");

                    b.Property<string>("Name");

                    b.Property<string>("PostCode");

                    b.HasKey("CustomerWarehouseId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Inv_Setup_CustomerWarehouse");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Distributor", b =>
                {
                    b.Property<long>("DistributorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long?>("BranchId");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("DRN");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<bool?>("HasTerritory");

                    b.Property<string>("LandlineNumber");

                    b.Property<string>("MobilerNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Nature");

                    b.Property<string>("Status");

                    b.Property<long?>("TerritoryId");

                    b.HasKey("DistributorId");

                    b.HasIndex("TerritoryId")
                        .IsUnique()
                        .HasFilter("[TerritoryId] IS NOT NULL");

                    b.ToTable("Inv_Setup_Distributor");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.InventoryCurrency", b =>
                {
                    b.Property<long>("InventoryCurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("ExchangeRate");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("InventoryCurrencyId");

                    b.ToTable("Inv_Setup_InventoryCurrency");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.InventoryItem", b =>
                {
                    b.Property<long>("InventoryItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("BrandId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<double?>("CostPrice");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Dose");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemCategoryId");

                    b.Property<string>("ItemCode");

                    b.Property<double?>("MinLevel");

                    b.Property<string>("Name");

                    b.Property<long?>("PackCategoryId");

                    b.Property<long?>("PackSizeId");

                    b.Property<long?>("PackTypeId");

                    b.Property<double?>("PackTypeInPackageType");

                    b.Property<long?>("PackageTypeId");

                    b.Property<long?>("ProductTypeId");

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<double?>("RetailPrice");

                    b.Property<double?>("TradeOfferAmount");

                    b.Property<long?>("UnitId");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("BrandId");

                    b.HasIndex("InventoryItemCategoryId");

                    b.HasIndex("PackCategoryId");

                    b.HasIndex("PackSizeId");

                    b.HasIndex("PackTypeId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Inv_Setup_InventoryItem");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.InventoryItemCategory", b =>
                {
                    b.Property<long>("InventoryItemCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("InventoryItemCategoryId");

                    b.ToTable("Inv_Setup_Category");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.ItemPriceStructure", b =>
                {
                    b.Property<long>("ItemPriceStructureId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ItemPriceStructureId");

                    b.ToTable("Inv_Setup_ItemPriceStructure");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.ModeOfPayment", b =>
                {
                    b.Property<long>("ModeOfPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ModeOfPaymentId");

                    b.ToTable("Inv_Setup_ModeOfPayment");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.PackageType", b =>
                {
                    b.Property<long>("PackageTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("PackageTypeId");

                    b.ToTable("Inv_Setup_PackageType");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.PackCategory", b =>
                {
                    b.Property<long>("PackCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("PackCategoryId");

                    b.ToTable("Inv_Setup_PackCategory");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.PackSize", b =>
                {
                    b.Property<long>("PackSizeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("Size");

                    b.HasKey("PackSizeId");

                    b.ToTable("Inv_Setup_PackSize");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.PackType", b =>
                {
                    b.Property<long>("PackTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("EquivalentBasicUnit");

                    b.Property<string>("Name");

                    b.HasKey("PackTypeId");

                    b.ToTable("Inv_Setup_PackType");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.ProductType", b =>
                {
                    b.Property<long>("ProductTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<string>("Class");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ProductTypeId");

                    b.ToTable("Inv_Setup_ProductType");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("RegionId");

                    b.ToTable("Inv_Setup_Region");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.ReturnReason", b =>
                {
                    b.Property<long>("ReturnReasonId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Reason");

                    b.HasKey("ReturnReasonId");

                    b.ToTable("Inv_Setup_ReturnReason");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.SalesPerson", b =>
                {
                    b.Property<long>("SalesPersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<string>("Company");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DOB");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DistributorId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FirstName");

                    b.Property<string>("ForeignAddress");

                    b.Property<string>("FullName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NIC");

                    b.Property<string>("Occupation");

                    b.Property<string>("OfficeAddress");

                    b.Property<string>("OfficeTel");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Remarks");

                    b.Property<string>("ResidenceAddress");

                    b.Property<string>("State");

                    b.HasKey("SalesPersonId");

                    b.HasIndex("DistributorId");

                    b.ToTable("Inv_Setup_SalesPerson");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Supplier", b =>
                {
                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long?>("BranchId");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("GlAccount");

                    b.Property<string>("LandlineNumber");

                    b.Property<string>("MobilerNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Nature");

                    b.Property<string>("Status");

                    b.HasKey("SupplierId");

                    b.ToTable("Inv_Setup_Supplier");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Tax", b =>
                {
                    b.Property<long>("TaxId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.Property<double?>("Percentage");

                    b.HasKey("TaxId");

                    b.ToTable("Inv_Setup_Tax");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Territory", b =>
                {
                    b.Property<long>("TerritoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AreaId");

                    b.Property<bool?>("IsAssigned");

                    b.Property<string>("Name");

                    b.HasKey("TerritoryId");

                    b.HasIndex("AreaId");

                    b.ToTable("Inv_Setup_Territory");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Transport", b =>
                {
                    b.Property<long>("TransportId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BookFreight");

                    b.Property<double?>("BookWeight");

                    b.Property<long?>("BranchId");

                    b.Property<double?>("BuiltyNumber");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Driver");

                    b.Property<string>("DriverContactNumber");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("VehicleNumber");

                    b.HasKey("TransportId");

                    b.ToTable("Inv_Setup_Transport");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Units", b =>
                {
                    b.Property<long>("UnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("UnitId");

                    b.ToTable("Inv_Setup_Units");
                });

            modelBuilder.Entity("ErpCore.Entities.Module", b =>
                {
                    b.Property<long>("ModuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("ModuleId");

                    b.ToTable("Sys_Module");
                });

            modelBuilder.Entity("ErpCore.Entities.Partner", b =>
                {
                    b.Property<long>("PartnerId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DOB");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Display");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NIC");

                    b.Property<string>("Occupation");

                    b.Property<long?>("PatientId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PlaceOfBirth");

                    b.HasKey("PartnerId");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasFilter("[PatientId] IS NOT NULL");

                    b.ToTable("Hims_Partner");
                });

            modelBuilder.Entity("ErpCore.Entities.Patient", b =>
                {
                    b.Property<long>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorizedPerson");

                    b.Property<long?>("BranchId");

                    b.Property<string>("City");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Display");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FirstName");

                    b.Property<string>("ForeignAddress");

                    b.Property<string>("FullName");

                    b.Property<string>("Gender");

                    b.Property<string>("Initial");

                    b.Property<string>("LastName");

                    b.Property<string>("MRN");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NIC");

                    b.Property<string>("Occupation");

                    b.Property<string>("OfficeAddress");

                    b.Property<string>("OfficeTel");

                    b.Property<long?>("PatientPackageId");

                    b.Property<long?>("PatientReferenceId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("PostalCode");

                    b.Property<string>("PrivateHospital");

                    b.Property<string>("PrivatePatientCons");

                    b.Property<string>("Reference");

                    b.Property<string>("RegCity");

                    b.Property<string>("Remarks");

                    b.Property<string>("ResidenceAddress");

                    b.Property<string>("State");

                    b.Property<long?>("TotalVisitsToDate");

                    b.Property<long?>("VisitNatureId");

                    b.HasKey("PatientId");

                    b.HasIndex("PatientPackageId")
                        .IsUnique()
                        .HasFilter("[PatientPackageId] IS NOT NULL");

                    b.HasIndex("PatientReferenceId");

                    b.HasIndex("VisitNatureId");

                    b.ToTable("Hims_Patient");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientClinicalRecord", b =>
                {
                    b.Property<long>("PatientClinicalRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActiveInactive");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("ConsultantId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("CycleNumber");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EtDate");

                    b.Property<DateTime?>("Lmp1");

                    b.Property<DateTime?>("Lmp2");

                    b.Property<string>("Outcome");

                    b.Property<long?>("PatientId");

                    b.Property<long?>("ProtocolId");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("SimulationDate");

                    b.Property<DateTime?>("SupressionDate");

                    b.Property<long?>("TreatmentTypeId");

                    b.Property<DateTime?>("TriggerDate");

                    b.Property<long>("TypewiseTreatmentNumber");

                    b.HasKey("PatientClinicalRecordId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProtocolId");

                    b.HasIndex("TreatmentTypeId");

                    b.ToTable("Hims_PatientClinicalRecord");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientDocument", b =>
                {
                    b.Property<long>("PatientDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DocumentName");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("FilePath");

                    b.Property<long?>("PatientId");

                    b.Property<string>("Remarks");

                    b.HasKey("PatientDocumentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Hims_PatientDocument");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientEmbryology", b =>
                {
                    b.Property<long>("PatientEmbryologyId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("EggNumber");

                    b.Property<DateTime?>("EmbryoDate");

                    b.Property<DateTime?>("FreshEmbryoTransferDate");

                    b.Property<string>("FreshEmbryoTransferTime");

                    b.Property<string>("Staff");

                    b.Property<string>("Status");

                    b.Property<string>("Time");

                    b.Property<long?>("TvopuId");

                    b.Property<string>("Verify");

                    b.HasKey("PatientEmbryologyId");

                    b.HasIndex("TvopuId");

                    b.ToTable("Hims_PatientEmbryology");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientEmbryologyDetails", b =>
                {
                    b.Property<long>("PatientEmbryologyDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<bool?>("Check");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("D2Check");

                    b.Property<string>("D3Check");

                    b.Property<string>("D4Check");

                    b.Property<string>("D5Check");

                    b.Property<string>("D6Check");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<int?>("EggNumber");

                    b.Property<string>("Fate");

                    b.Property<string>("FertCheck");

                    b.Property<string>("OocyteExam");

                    b.Property<long?>("PaientEmbryologyId");

                    b.Property<long?>("PatientEmbryologyId");

                    b.Property<long?>("SpermConcentration");

                    b.Property<string>("TwentyFourHourCheck");

                    b.HasKey("PatientEmbryologyDetailsId");

                    b.HasIndex("PatientEmbryologyId");

                    b.ToTable("Hims_PatientEmbryologyDetails");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientInsemenation", b =>
                {
                    b.Property<long>("PatientInsemenationId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("Abstinence");

                    b.Property<string>("Appearance");

                    b.Property<string>("AssayTime");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<string>("CollectionNumber");

                    b.Property<string>("Comments");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("Consistency");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("EjaculationTime");

                    b.Property<double?>("FinalVolume");

                    b.Property<double?>("HeadAbnormalities");

                    b.Property<double?>("Immotile");

                    b.Property<double?>("ImmotileCount");

                    b.Property<string>("ImmotileCountRange");

                    b.Property<string>("Location");

                    b.Property<double?>("MidpieceAbnormalities");

                    b.Property<double?>("MotileCount");

                    b.Property<string>("MotileCountRange");

                    b.Property<double?>("NormalForms");

                    b.Property<string>("OtherCells");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<string>("Ph");

                    b.Property<long>("ProcedureNumber");

                    b.Property<double?>("SpermProgressionNonLinear");

                    b.Property<double?>("SpermProgressionNonProgressive");

                    b.Property<double?>("SpermProgressionRapidLinear");

                    b.Property<double?>("TailAbnormalities");

                    b.Property<string>("TestPreprationMethod");

                    b.Property<double?>("TestPreprationMotileCount");

                    b.Property<string>("TestPreprationMotileCountRange");

                    b.Property<double?>("TestPreprationRapidLinearProgression");

                    b.Property<double?>("TestPreprationRapidNonLinearProgression");

                    b.Property<double?>("TestPreprationTotalCount");

                    b.Property<string>("TestPreprationTotalCountRange");

                    b.Property<string>("TimeCompleted");

                    b.Property<double>("TotalCount");

                    b.Property<string>("TotalCountRange");

                    b.Property<string>("Volume");

                    b.Property<double?>("VolumeSemenUsed");

                    b.HasKey("PatientInsemenationId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.ToTable("Hims_PatientInsemenation");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientInvoice", b =>
                {
                    b.Property<long>("PatientInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AmountToPay");

                    b.Property<long?>("AppointmentId");

                    b.Property<double?>("BalanceAmount");

                    b.Property<string>("Bank");

                    b.Property<long?>("BranchId");

                    b.Property<string>("ChequeNumber");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("Consultant");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("InvoiceRemarks");

                    b.Property<string>("InvoiceType");

                    b.Property<double?>("PaidAmount");

                    b.Property<long?>("PatientId");

                    b.Property<string>("PaymentMethod");

                    b.Property<double?>("PreviousAmout");

                    b.Property<string>("SlipNumber");

                    b.Property<long?>("UserId");

                    b.HasKey("PatientInvoiceId");

                    b.HasIndex("AppointmentId")
                        .IsUnique()
                        .HasFilter("[AppointmentId] IS NOT NULL");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Hims_PatientInvoice");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientInvoiceItem", b =>
                {
                    b.Property<long>("PatientInvoiceItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountPercentage");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("GrossAmount");

                    b.Property<string>("Name");

                    b.Property<long?>("NameId");

                    b.Property<string>("Nature");

                    b.Property<double?>("NetAmount");

                    b.Property<long?>("PatientInvoiceId");

                    b.Property<double?>("Quantity");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("PatientInvoiceItemId");

                    b.HasIndex("PatientInvoiceId");

                    b.ToTable("Hims_PatientInvoiceItem");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientPackage", b =>
                {
                    b.Property<long>("PatientPackageId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("LastPaidAmount");

                    b.Property<DateTime?>("LastPaymentDate");

                    b.Property<long?>("PackageId");

                    b.Property<long?>("PatientId");

                    b.Property<double?>("TotalAmountPaid");

                    b.Property<double?>("TotalBalance");

                    b.Property<double?>("TotalPrice");

                    b.HasKey("PatientPackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("Hims_PatientPackage");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientReference", b =>
                {
                    b.Property<long>("PatientReferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Initial");

                    b.Property<string>("PersonName");

                    b.Property<string>("RefAddress");

                    b.Property<string>("ReferenceTel");

                    b.Property<string>("ReferredBy");

                    b.HasKey("PatientReferenceId");

                    b.ToTable("Hims_PatientReference");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientVital", b =>
                {
                    b.Property<long>("PatientVitalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodOxygenSaturation");

                    b.Property<string>("BloodPressureDown");

                    b.Property<string>("BloodPressureUp");

                    b.Property<long?>("BranchId");

                    b.Property<string>("CalculatedBMI");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Height");

                    b.Property<string>("Pulse");

                    b.Property<string>("RespiratoryRate");

                    b.Property<string>("Temperature");

                    b.Property<long?>("VisitId");

                    b.Property<string>("Weight");

                    b.HasKey("PatientVitalId");

                    b.ToTable("Hims_PatientVital");
                });

            modelBuilder.Entity("ErpCore.Entities.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attribute");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("FeatureId");

                    b.Property<string>("PermissionCode");

                    b.Property<long?>("RoleId");

                    b.Property<long?>("UserId");

                    b.HasKey("PermissionId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Sys_Permission");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseIndent", b =>
                {
                    b.Property<long>("PurchaseIndentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsIssued");

                    b.Property<bool?>("IsProcessed");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<string>("PurchaseIndentNumber");

                    b.Property<long?>("PurchaseOrderId");

                    b.Property<long?>("UserId");

                    b.HasKey("PurchaseIndentId");

                    b.HasIndex("UserId");

                    b.ToTable("Inv_PurchaseIndent");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseIndentItem", b =>
                {
                    b.Property<long>("PurchaseIndentItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<long?>("PurchaseIndentId");

                    b.Property<double?>("Quantity");

                    b.HasKey("PurchaseIndentItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("PurchaseIndentId");

                    b.ToTable("Inv_PurchaseIndentItem");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseInvoice", b =>
                {
                    b.Property<long>("PurchaseInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GRNId");

                    b.Property<string>("InvoiceNumber");

                    b.Property<long?>("PurchaseOrderId");

                    b.HasKey("PurchaseInvoiceId");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderId] IS NOT NULL");

                    b.ToTable("Inv_PurchaseInvoice");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseOrder", b =>
                {
                    b.Property<long>("PurchaseOrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<DateTime?>("BillDate");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GRNId");

                    b.Property<long?>("InventoryCurrencyId");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsIssued");

                    b.Property<bool?>("IsProcessed");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.Property<string>("OrderRemarks");

                    b.Property<string>("OrderType");

                    b.Property<string>("Origin");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<long?>("PurchaseIndentId");

                    b.Property<string>("Remarks");

                    b.Property<bool?>("Status");

                    b.Property<long?>("SupplierId");

                    b.Property<long?>("UserId");

                    b.Property<string>("VendorBillNumber");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("InventoryCurrencyId");

                    b.HasIndex("PurchaseIndentId")
                        .IsUnique()
                        .HasFilter("[PurchaseIndentId] IS NOT NULL");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Inv_PurchaseOrder");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<long>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AfterDiscountAmount");

                    b.Property<double?>("AfterGstAmount");

                    b.Property<string>("BatchNumber");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<double?>("CostPrice");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<double?>("DeliveryAmount");

                    b.Property<double?>("DeliveryPercentage");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountPercentage");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("ExchangeRate");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<double?>("FreightAmount");

                    b.Property<double?>("FreightPercentage");

                    b.Property<double?>("GrandTotal");

                    b.Property<double?>("GrossAmount");

                    b.Property<double?>("GstAmount");

                    b.Property<double?>("GstPercentage");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<double?>("NetAmount");

                    b.Property<string>("NumberPackType");

                    b.Property<double?>("OtherAmount");

                    b.Property<double?>("OtherPercentage");

                    b.Property<string>("PackSize");

                    b.Property<string>("PackType");

                    b.Property<long?>("PurchaseOrderId");

                    b.Property<int?>("Quantity");

                    b.Property<double?>("Rate");

                    b.Property<double?>("RetailPrice");

                    b.HasKey("PurchaseOrderItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Inv_PurchaseOrderItem");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseReturn", b =>
                {
                    b.Property<long>("PurchaseReturnId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("GRNId");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<string>("ReturnNumber");

                    b.Property<long?>("ReturnReasonId");

                    b.Property<double?>("TotalReturnAmount");

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("GRNId")
                        .IsUnique()
                        .HasFilter("[GRNId] IS NOT NULL");

                    b.HasIndex("ReturnReasonId");

                    b.ToTable("Inv_PurchaseReturn");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseReturnItem", b =>
                {
                    b.Property<long>("PurchaseReturnItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<long?>("PurchaseReturnId");

                    b.Property<double?>("ReturnAmount");

                    b.Property<double?>("ReturnQuantity");

                    b.HasKey("PurchaseReturnItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("Inv_PurchaseReturnItem");
                });

            modelBuilder.Entity("ErpCore.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DepartmentId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Sys_Role");
                });

            modelBuilder.Entity("ErpCore.Entities.RoleFeature", b =>
                {
                    b.Property<long>("RoleId");

                    b.Property<long>("FeatureId");

                    b.HasKey("RoleId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("Sys_RoleFeature");
                });

            modelBuilder.Entity("ErpCore.Entities.RoleModule", b =>
                {
                    b.Property<long>("RoleId");

                    b.Property<long>("ModuleId");

                    b.HasKey("RoleId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Sys_RoleModule");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesIndent", b =>
                {
                    b.Property<long>("SalesIndentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ConsultantName");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CustomerCode");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerSecondName");

                    b.Property<DateTime?>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DeliveryChallanId");

                    b.Property<long?>("DeliveryOrderId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsIssued");

                    b.Property<bool?>("IsProcessed");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<string>("SalesIndentNumber");

                    b.Property<long?>("SalesInvoiceId");

                    b.Property<long?>("SalesOrderId");

                    b.Property<double?>("TotalQuantity");

                    b.Property<double?>("TotalTradeOffer");

                    b.Property<double?>("TotalTradeOfferDiscount");

                    b.Property<double?>("TotalTradePrice");

                    b.Property<long?>("UserId");

                    b.HasKey("SalesIndentId");

                    b.HasIndex("DeliveryChallanId");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Inv_SalesIndent");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesIndentItem", b =>
                {
                    b.Property<long>("SalesIndentItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<double?>("Dosage");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<bool?>("IsPaid");

                    b.Property<double?>("Quantity");

                    b.Property<long?>("SalesIndentId");

                    b.Property<double?>("TotalTradeOfferPerItem");

                    b.Property<double?>("TotalTradePricePerItem");

                    b.Property<double?>("TradeOfferPricePerUnit");

                    b.Property<DateTime?>("TreatmentEnd");

                    b.Property<DateTime?>("TreatmentStart");

                    b.Property<double?>("TreatmentTimeInDays");

                    b.HasKey("SalesIndentItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("SalesIndentId");

                    b.ToTable("Inv_SalesIndentItem");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesInvoice", b =>
                {
                    b.Property<long>("SalesInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DeliveryChallanId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("SalesInvoiceCode");

                    b.Property<long?>("SalesReturnId");

                    b.HasKey("SalesInvoiceId");

                    b.HasIndex("DeliveryChallanId")
                        .IsUnique()
                        .HasFilter("[DeliveryChallanId] IS NOT NULL");

                    b.ToTable("Inv_SalesInvoice");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesOrder", b =>
                {
                    b.Property<long>("SalesOrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgainstLotNumber");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContactPersonNumber");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<long?>("CustomerId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<long?>("DeliveryOrderId");

                    b.Property<double?>("DiscountAmount");

                    b.Property<double?>("DiscountedAmount");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("ExtendedAmount");

                    b.Property<double?>("ExtraDiscountAmount");

                    b.Property<double?>("ExtraDiscountPercentage");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsIssued");

                    b.Property<bool?>("IsProcessed");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<long?>("ModeOfPaymentId");

                    b.Property<double?>("OrderAmount");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<string>("Remarks");

                    b.Property<long?>("SalesIndentId");

                    b.Property<string>("SalesOrderCode");

                    b.Property<long?>("SalesPersonId");

                    b.Property<long?>("SalesReturnId");

                    b.Property<double?>("SalesTaxAmount");

                    b.Property<bool?>("Shipped");

                    b.Property<string>("SlipNumber");

                    b.Property<double?>("SpecialDiscountAmount");

                    b.Property<double?>("SpecialDiscountPercentage");

                    b.Property<bool?>("Status");

                    b.Property<long?>("TaxId");

                    b.Property<double?>("TotalQuantity");

                    b.Property<long?>("UserId");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModeOfPaymentId");

                    b.HasIndex("SalesIndentId")
                        .IsUnique()
                        .HasFilter("[SalesIndentId] IS NOT NULL");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("TaxId");

                    b.HasIndex("UserId");

                    b.ToTable("Inv_SalesOrder");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesOrderItem", b =>
                {
                    b.Property<long>("SalesOrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BasicAmount");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<double?>("ComissionAmount");

                    b.Property<long?>("ComissionId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<double?>("EquivalentUnitQuantity");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<double?>("ItemTotalAmount");

                    b.Property<double?>("OrderUnitQuantity");

                    b.Property<long?>("PackTypeId");

                    b.Property<long?>("SalesOrderId");

                    b.Property<double?>("TaxAmount");

                    b.Property<double?>("TotalTradeOfferAmountPerItem");

                    b.Property<double?>("TradeOfferAmountPerUnit");

                    b.HasKey("SalesOrderItemId");

                    b.HasIndex("ComissionId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("PackTypeId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Inv_SalesOrderItem");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesReturn", b =>
                {
                    b.Property<long>("SalesReturnId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<string>("ReturnNumber");

                    b.Property<long?>("ReturnReasonId");

                    b.Property<long?>("SalesInvoiceId");

                    b.Property<long?>("SalesOrderId");

                    b.Property<double?>("TotalReturnAmount");

                    b.HasKey("SalesReturnId");

                    b.HasIndex("ReturnReasonId");

                    b.HasIndex("SalesInvoiceId")
                        .IsUnique()
                        .HasFilter("[SalesInvoiceId] IS NOT NULL");

                    b.HasIndex("SalesOrderId")
                        .IsUnique()
                        .HasFilter("[SalesOrderId] IS NOT NULL");

                    b.ToTable("Inv_SalesReturn");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesReturnItem", b =>
                {
                    b.Property<long>("SalesReturnItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("InventoryId");

                    b.Property<long?>("InventoryItemId");

                    b.Property<double?>("ReturnAmount");

                    b.Property<double?>("ReturnQuantity");

                    b.Property<long?>("SalesReturnId");

                    b.HasKey("SalesReturnItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("SalesReturnId");

                    b.ToTable("Inv_SalesReturnItem");
                });

            modelBuilder.Entity("ErpCore.Entities.SemenAnalysis", b =>
                {
                    b.Property<long>("SemenAnalysisId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("Abstinence");

                    b.Property<string>("Appearance");

                    b.Property<string>("AssayTime");

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CollectionDate");

                    b.Property<string>("CollectionNumber");

                    b.Property<string>("Comments");

                    b.Property<long?>("CompanyId");

                    b.Property<string>("Consistency");

                    b.Property<long?>("ConsultantId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("EjaculationTime");

                    b.Property<double?>("FinalVolume");

                    b.Property<double?>("HeadAbnormalities");

                    b.Property<double?>("Immotile");

                    b.Property<double?>("ImmotileCount");

                    b.Property<string>("ImmotileCountRange");

                    b.Property<string>("LabComments");

                    b.Property<string>("Location");

                    b.Property<double?>("MidpieceAbnormalities");

                    b.Property<double?>("MotileCount");

                    b.Property<string>("MotileCountRange");

                    b.Property<double?>("NormalForms");

                    b.Property<string>("OtherCells");

                    b.Property<string>("Others");

                    b.Property<long?>("PatientId");

                    b.Property<string>("Ph");

                    b.Property<long>("ProcedureNumber");

                    b.Property<double?>("SpermProgressionNonLinear");

                    b.Property<double?>("SpermProgressionNonProgressive");

                    b.Property<double?>("SpermProgressionRapidLinear");

                    b.Property<double?>("TailAbnormalities");

                    b.Property<string>("TestPreprationMethod");

                    b.Property<double?>("TestPreprationMotileCount");

                    b.Property<string>("TestPreprationMotileCountRange");

                    b.Property<double?>("TestPreprationRapidLinearProgression");

                    b.Property<double?>("TestPreprationRapidNonLinearProgression");

                    b.Property<double?>("TestPreprationTotalCount");

                    b.Property<string>("TestPreprationTotalCountRange");

                    b.Property<string>("TimeCompleted");

                    b.Property<double>("TotalCount");

                    b.Property<string>("TotalCountRange");

                    b.Property<string>("Volume");

                    b.Property<double?>("VolumeSemenUsed");

                    b.HasKey("SemenAnalysisId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("PatientId");

                    b.ToTable("Hims_SemenAnalysis");
                });

            modelBuilder.Entity("ErpCore.Entities.ThawAssessment", b =>
                {
                    b.Property<long>("ThawAssessmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<long?>("TvopuId");

                    b.HasKey("ThawAssessmentId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.HasIndex("TvopuId");

                    b.ToTable("Hims_ThawAssessment");
                });

            modelBuilder.Entity("ErpCore.Entities.Tvopu", b =>
                {
                    b.Property<long>("TvopuId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActiveInactive");

                    b.Property<long?>("EmbryologistId");

                    b.Property<string>("FollicileAspiratedLeft");

                    b.Property<string>("FollicileAspiratedRight");

                    b.Property<string>("OociteCollectedLeft");

                    b.Property<string>("OociteCollectedRight");

                    b.Property<long?>("PatientClinicalRecordId");

                    b.Property<long?>("PickupCount");

                    b.Property<DateTime?>("PickupDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("TimeFinish");

                    b.Property<DateTime?>("TimeStart");

                    b.Property<long?>("TotalPickupCount");

                    b.HasKey("TvopuId");

                    b.HasIndex("EmbryologistId");

                    b.HasIndex("PatientClinicalRecordId")
                        .IsUnique()
                        .HasFilter("[PatientClinicalRecordId] IS NOT NULL");

                    b.ToTable("Hims_Tvopu");
                });

            modelBuilder.Entity("ErpCore.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long?>("AssignRosterId");

                    b.Property<long?>("BankId");

                    b.Property<string>("BloggerProfile");

                    b.Property<string>("BloodGroup");

                    b.Property<long?>("BranchId");

                    b.Property<string>("CNIC");

                    b.Property<DateTime?>("CNICExpiry");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CostCenterId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<long?>("DepartmentId");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<string>("Email");

                    b.Property<string>("FacebookUrl");

                    b.Property<string>("FatherName");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("FullName");

                    b.Property<string>("Gender");

                    b.Property<string>("GooglePlusUrl");

                    b.Property<long?>("GratuityId");

                    b.Property<long?>("GroupId");

                    b.Property<string>("HomePhone");

                    b.Property<string>("IdentityId");

                    b.Property<string>("InstagramUrl");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LinkedinUrl");

                    b.Property<string>("MaritalStatus");

                    b.Property<long?>("MasterPayrollId");

                    b.Property<string>("POB");

                    b.Property<long?>("PayrollId");

                    b.Property<string>("PermanentAddress");

                    b.Property<long?>("PfPaymentId");

                    b.Property<string>("Phone");

                    b.Property<string>("PhotoFilePath");

                    b.Property<string>("PinterestUrl");

                    b.Property<long?>("ReligionId");

                    b.Property<long?>("RoleId");

                    b.Property<string>("TwitterUrl");

                    b.Property<long?>("UserCompanyId");

                    b.Property<long?>("UserPhotoId");

                    b.Property<long?>("UserSalaryId");

                    b.Property<string>("YoutubeUrl");

                    b.HasKey("UserId");

                    b.HasIndex("AssignRosterId");

                    b.HasIndex("BankId")
                        .IsUnique()
                        .HasFilter("[BankId] IS NOT NULL");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GratuityId")
                        .IsUnique()
                        .HasFilter("[GratuityId] IS NOT NULL");

                    b.HasIndex("GroupId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("MasterPayrollId");

                    b.HasIndex("PayrollId")
                        .IsUnique()
                        .HasFilter("[PayrollId] IS NOT NULL");

                    b.HasIndex("ReligionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserPhotoId")
                        .IsUnique()
                        .HasFilter("[UserPhotoId] IS NOT NULL");

                    b.HasIndex("UserSalaryId")
                        .IsUnique()
                        .HasFilter("[UserSalaryId] IS NOT NULL");

                    b.ToTable("Sys_User");
                });

            modelBuilder.Entity("ErpCore.Entities.Visit", b =>
                {
                    b.Property<long>("VisitId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BranchId");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CompanyId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditedAt");

                    b.Property<long?>("EditedBy");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool?>("IsActive");

                    b.Property<long?>("PatientId");

                    b.Property<long?>("PatientVitalId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<long?>("VisitNoteId");

                    b.HasKey("VisitId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientVitalId")
                        .IsUnique()
                        .HasFilter("[PatientVitalId] IS NOT NULL");

                    b.ToTable("Hims_Visit");
                });

            modelBuilder.Entity("ErpCore.Entities.VisitDiagnosis", b =>
                {
                    b.Property<long>("VisitDiagnosisId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DiagnosisId");

                    b.Property<long?>("VisitId");

                    b.HasKey("VisitDiagnosisId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("VisitId");

                    b.ToTable("Hims_VisitDiagnosis");
                });

            modelBuilder.Entity("ErpCore.Entities.VisitNote", b =>
                {
                    b.Property<long>("VisitNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClinicalNote");

                    b.Property<long?>("VisitId");

                    b.HasKey("VisitNoteId");

                    b.HasIndex("VisitId")
                        .IsUnique()
                        .HasFilter("[VisitId] IS NOT NULL");

                    b.ToTable("Hims_VisitNote");
                });

            modelBuilder.Entity("ErpCore.Entities.VisitTest", b =>
                {
                    b.Property<long>("VisitTestId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsPaid");

                    b.Property<string>("Remarks");

                    b.Property<long?>("TestId");

                    b.Property<long?>("VisitId");

                    b.HasKey("VisitTestId");

                    b.HasIndex("TestId");

                    b.HasIndex("VisitId");

                    b.ToTable("Hims_VisitTest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ErpCore.Entities.Appointment", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Consultant", "Consultant")
                        .WithMany("Appointments")
                        .HasForeignKey("ConsultantId");

                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.HasOne("ErpCore.Entities.Visit", "Visit")
                        .WithOne()
                        .HasForeignKey("ErpCore.Entities.Appointment", "VisitId");

                    b.HasOne("ErpCore.Entities.HimsSetup.VisitNature", "VisitNature")
                        .WithMany("Appointments")
                        .HasForeignKey("VisitNatureId");
                });

            modelBuilder.Entity("ErpCore.Entities.BioChemistryTestDetails", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.BioChemistryTest", "BioChemistryTest")
                        .WithMany("BioChemistryTestDetails")
                        .HasForeignKey("BioChemistryTestId");

                    b.HasOne("ErpCore.Entities.BioChemistryTestOnTreatment", "BioChemistryTestOnTreatment")
                        .WithMany("BioChemistryTestDetails")
                        .HasForeignKey("BioChemistryTestOnTreatmentId");

                    b.HasOne("ErpCore.Entities.BioChemistryTestOutsider", "BioChemistryTestOutsider")
                        .WithMany("BioChemistryTestDetails")
                        .HasForeignKey("BioChemistryTestOutsiderId");

                    b.HasOne("ErpCore.Entities.HimsSetup.TestUnit", "TestUnit")
                        .WithMany()
                        .HasForeignKey("TestUnitId");
                });

            modelBuilder.Entity("ErpCore.Entities.BioChemistryTestOnTreatment", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("BioChemistryTestOnTreatment")
                        .HasForeignKey("ErpCore.Entities.BioChemistryTestOnTreatment", "PatientClinicalRecordId");
                });

            modelBuilder.Entity("ErpCore.Entities.BioChemistryTestOutsider", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ErpCore.Entities.Biopsy", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("Biopsy")
                        .HasForeignKey("ErpCore.Entities.Biopsy", "PatientClinicalRecordId");

                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ErpCore.Entities.Branch", b =>
                {
                    b.HasOne("ErpCore.Entities.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityId");

                    b.HasOne("ErpCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ErpCore.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("ErpCore.Entities.City", b =>
                {
                    b.HasOne("ErpCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ErpCore.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("ErpCore.Entities.ClinicalRecordDrugs", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("ErpCore.Entities.PatientClinicalRecord")
                        .WithMany("ClinicalRecordDrugs")
                        .HasForeignKey("PatientClinicalRecordId");
                });

            modelBuilder.Entity("ErpCore.Entities.Country", b =>
                {
                    b.HasOne("ErpCore.Entities.Company", "Company")
                        .WithMany("Countries")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("ErpCore.Entities.DeliveryChallan", b =>
                {
                    b.HasOne("ErpCore.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithOne("DeliveryChallan")
                        .HasForeignKey("ErpCore.Entities.DeliveryChallan", "DeliveryOrderId");

                    b.HasOne("ErpCore.Entities.InventorySetup.Transport", "Transport")
                        .WithMany("DeliveryChallans")
                        .HasForeignKey("TransportId");
                });

            modelBuilder.Entity("ErpCore.Entities.DeliveryOrder", b =>
                {
                    b.HasOne("ErpCore.Entities.SalesOrder", "SalesOrder")
                        .WithOne("DeliveryOrder")
                        .HasForeignKey("ErpCore.Entities.DeliveryOrder", "SalesOrderId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.DeliveryOrderItem", b =>
                {
                    b.HasOne("ErpCore.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany("DeliveryOrderItems")
                        .HasForeignKey("DeliveryOrderId");

                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany("DeliveryOrderItems")
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("DeliveryOrderItems")
                        .HasForeignKey("InventoryItemId");
                });

            modelBuilder.Entity("ErpCore.Entities.Department", b =>
                {
                    b.HasOne("ErpCore.Entities.Branch", "Branch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("ErpCore.Entities.EmbryoFreezeThawed", b =>
                {
                    b.HasOne("ErpCore.Entities.ThawAssessment", "ThawAssessment")
                        .WithMany("EmbryoFreezeThaweds")
                        .HasForeignKey("ThawAssessmentId");
                });

            modelBuilder.Entity("ErpCore.Entities.EmbryoFreezeUnthawed", b =>
                {
                    b.HasOne("ErpCore.Entities.ThawAssessment", "ThawAssessment")
                        .WithMany("EmbryoFreezeUnthaweds")
                        .HasForeignKey("ThawAssessmentId");
                });

            modelBuilder.Entity("ErpCore.Entities.Feature", b =>
                {
                    b.HasOne("ErpCore.Entities.Module", "Module")
                        .WithMany("Features")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseInvoice", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.DetailAccount", "DetailAccount")
                        .WithMany("FinancePurchaseInvoices")
                        .HasForeignKey("DetailAccountId");

                    b.HasOne("ErpCore.Entities.Finance.FinancePurchaseReturn", "FinancePurchaseReturn")
                        .WithOne("FinancePurchaseInvoice")
                        .HasForeignKey("ErpCore.Entities.Finance.FinancePurchaseInvoice", "FinancePurchaseReturnId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseInvoiceDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.Finance.FinancePurchaseInvoice", "FinancePurchaseInvoice")
                        .WithMany("FinancePurchaseInvoiceDetails")
                        .HasForeignKey("FinancePurchaseInvoiceId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseReturn", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.DetailAccount", "DetailAccount")
                        .WithMany("FinancePurchaseReturns")
                        .HasForeignKey("DetailAccountId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinancePurchaseReturnDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.Finance.FinancePurchaseReturn", "FinancePurchaseReturn")
                        .WithMany("FinancePurchaseReturnDetails")
                        .HasForeignKey("FinancePurchaseReturnId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesInvoice", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.DetailAccount", "DetailAccount")
                        .WithMany("FinanceSalesInvoices")
                        .HasForeignKey("DetailAccountId");

                    b.HasOne("ErpCore.Entities.Finance.FinanceSalesReturn", "FinanceSalesReturn")
                        .WithOne("FinanceSalesInvoice")
                        .HasForeignKey("ErpCore.Entities.Finance.FinanceSalesInvoice", "FinanceSalesReturnId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesInvoiceDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.Finance.FinanceSalesInvoice", "FinanceSalesInvoice")
                        .WithMany("FinanceSalesInvoiceDetails")
                        .HasForeignKey("FinanceSalesInvoiceId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesReturn", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.DetailAccount", "DetailAccount")
                        .WithMany("FinanceSalesReturns")
                        .HasForeignKey("DetailAccountId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.FinanceSalesReturnDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.Finance.FinanceSalesReturn", "FinanceSalesReturn")
                        .WithMany("FinanceSalesReturnDetails")
                        .HasForeignKey("FinanceSalesReturnId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.Voucher", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.FinancialYear", "FinancialYear")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("ErpCore.Entities.FinanceSetup.VoucherType", "VoucherType")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.Finance.VoucherDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.DetailAccount", "DetailAccount")
                        .WithMany()
                        .HasForeignKey("DetailAccountId");

                    b.HasOne("ErpCore.Entities.Finance.Voucher", "Voucher")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("VoucherId");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.DetailAccount", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.SecondSubAccount", "SecondSubAccount")
                        .WithMany("DetailAccounts")
                        .HasForeignKey("SecondSubAccountId");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.SecondSubAccount", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.SubAccount", "SubAccount")
                        .WithMany("SecondSubAccounts")
                        .HasForeignKey("SubAccountId");
                });

            modelBuilder.Entity("ErpCore.Entities.FinanceSetup.SubAccount", b =>
                {
                    b.HasOne("ErpCore.Entities.FinanceSetup.MasterAccount", "MasterAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("MasterAccountId");
                });

            modelBuilder.Entity("ErpCore.Entities.FreezePrepration", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("FreezePrepration")
                        .HasForeignKey("ErpCore.Entities.FreezePrepration", "PatientClinicalRecordId");
                });

            modelBuilder.Entity("ErpCore.Entities.GRN", b =>
                {
                    b.HasOne("ErpCore.Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithOne("GRN")
                        .HasForeignKey("ErpCore.Entities.GRN", "PurchaseInvoiceId");

                    b.HasOne("ErpCore.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithOne("GRN")
                        .HasForeignKey("ErpCore.Entities.GRN", "PurchaseOrderId");
                });

            modelBuilder.Entity("ErpCore.Entities.GrnItem", b =>
                {
                    b.HasOne("ErpCore.Entities.GRN", "GRN")
                        .WithMany("GrnItems")
                        .HasForeignKey("GRNId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("GrnItems")
                        .HasForeignKey("InventoryItemId");
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.AppointmentTest", b =>
                {
                    b.HasOne("ErpCore.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentTests")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.HimsSetup.Test", "Test")
                        .WithMany("AppointmentTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HimsSetup.Test", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("TestCategoryId");

                    b.HasOne("ErpCore.Entities.HimsSetup.TestType", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceFlagExemption", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceFlag", "AttendanceFlag")
                        .WithMany("AttendanceFlagExemptions")
                        .HasForeignKey("AttendanceFlagId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagType", "FlagType")
                        .WithMany()
                        .HasForeignKey("FlagTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceRule", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceFlag", "AttendanceFlag")
                        .WithMany("AttendanceRules")
                        .HasForeignKey("AttendanceFlagId");

                    b.HasOne("ErpCore.Entities.HRSetup.Group", "Group")
                        .WithMany("AttendanceRules")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceRuleLeaveType", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceRule", "AttendanceRule")
                        .WithMany("AttendanceRuleLeaveTypes")
                        .HasForeignKey("AttendanceRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", "LeaveType")
                        .WithMany("AttendanceRuleLeaveTypes")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceAdmin.UserAttendanceFlagExemption", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceAdmin.AttendanceFlagExemption", "AttendanceFlagExemption")
                        .WithMany("UserAttendanceFlagExemptions")
                        .HasForeignKey("AttendanceFlagExemptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("UserAttendanceFlagExemptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceRequest", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRoster", "AssignRoster")
                        .WithMany("AttendanceRequests")
                        .HasForeignKey("AssignRosterId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceRequestApprover", "AttendanceRequestApprover")
                        .WithMany("AttendanceRequests")
                        .HasForeignKey("AttendanceRequestApproverId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceRequestType", "AttendanceRequestType")
                        .WithMany("AttendanceRequests")
                        .HasForeignKey("AttendanceRequestTypeId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("AttendanceRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRoster", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.Roster", "Roster")
                        .WithMany("AssignRosters")
                        .HasForeignKey("RosterId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRosterShift", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRoster", "AssignRoster")
                        .WithMany("AssignRosterShifts")
                        .HasForeignKey("AssignRosterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.Shift", "Shift")
                        .WithMany("AssignRosterShifts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceFlag", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagCategory", "FlagCategory")
                        .WithMany("AttendanceFlags")
                        .HasForeignKey("FlagCategoryId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagEffectType", "FlagEffectType")
                        .WithMany("AttendanceFlags")
                        .HasForeignKey("FlagEffectTypeId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagType", "FlagType")
                        .WithMany("AttendanceFlags")
                        .HasForeignKey("FlagTypeId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.FlagValue", "FlagValue")
                        .WithMany("AttendanceFlags")
                        .HasForeignKey("FlagValueId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceRequestApprover", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("AttendanceRequestApprovers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.AttendanceSetup.UserRosterAttendanceAttendanceFlag", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AttendanceFlag", "AttendanceFlag")
                        .WithMany("UserRosterAttendanceAttendanceFlags")
                        .HasForeignKey("AttendanceFlagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.Shift")
                        .WithMany("UserRosterAttendanceAttendanceFlags")
                        .HasForeignKey("ShiftsId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.UserRosterAttendance", "UserRosterAttendance")
                        .WithMany("UserRosterAttendanceAttendanceFlags")
                        .HasForeignKey("UserRosterAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.EmployeeOverTimeEntitlement", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("EmployeeOverTimeEntitlements")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OfficialVisitEntry", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("OfficialVisitEntries")
                        .HasForeignKey("UserId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.UserRosterAttendance", "UserRosterAttendance")
                        .WithMany("OfficialVisitEntries")
                        .HasForeignKey("UserRosterAttendanceId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OverTimeEntitlement", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", "OverTimeType")
                        .WithMany("OverTimeEntitlements")
                        .HasForeignKey("OverTimeTypeId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("OverTimeEntitlements")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeIncomingOt", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.EmployeeOverTimeEntitlement", "EmployeeOverTimeEntitlement")
                        .WithOne("EmployeeIncomingOt")
                        .HasForeignKey("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeIncomingOt", "EmployeeOverTimeEntitlementId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", "OverTimeType")
                        .WithMany()
                        .HasForeignKey("OverTimeTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeOffDayOt", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.EmployeeOverTimeEntitlement", "EmployeeOverTimeEntitlement")
                        .WithOne("EmployeeOffDayOt")
                        .HasForeignKey("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeOffDayOt", "EmployeeOverTimeEntitlementId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", "OverTimeType")
                        .WithMany()
                        .HasForeignKey("OverTimeTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeOutgoingOt", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.EmployeeOverTimeEntitlement", "EmployeeOverTimeEntitlement")
                        .WithOne("EmployeeOutgoingOt")
                        .HasForeignKey("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeOutgoingOt", "EmployeeOverTimeEntitlementId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", "OverTimeType")
                        .WithMany()
                        .HasForeignKey("OverTimeTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeWorkingDayOt", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.EmployeeOverTimeEntitlement", "EmployeeOverTimeEntitlement")
                        .WithOne("EmployeeWorkingDayOt")
                        .HasForeignKey("ErpCore.Entities.HR.Attendance.OvertimeSetup.EmployeeWorkingDayOt", "EmployeeOverTimeEntitlementId");

                    b.HasOne("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", "OverTimeType")
                        .WithMany()
                        .HasForeignKey("OverTimeTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeType", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.OvertimeSetup.OverTimeFlag", "OverTimeFlag")
                        .WithMany("OverTimeTypes")
                        .HasForeignKey("OvertimeFlagId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Attendance.UserRosterAttendance", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRoster", "AssignRoster")
                        .WithMany("UserRosterAttendances")
                        .HasForeignKey("AssignRosterId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveAdmin.LeavePolicyEmployee", "LeavePolicyEmployee")
                        .WithMany("UserRosterAttendances")
                        .HasForeignKey("LeavePolicyEmployeeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.MonthlyUserSalary", "MonthlyUserSalary")
                        .WithMany("UserRosterAttendances")
                        .HasForeignKey("MonthlyUserSalaryId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("UserRosterAttendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveAdmin.LeaveOpening", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveYear", "LeaveYear")
                        .WithMany()
                        .HasForeignKey("LeaveYearId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("LeaveOpenings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveAdmin.LeaveOpeningDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveAdmin.LeaveOpening", "LeaveOpening")
                        .WithMany("LeaveOpeningDetails")
                        .HasForeignKey("LeaveOpeningId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", "LeaveType")
                        .WithMany("LeaveOpeningDetails")
                        .HasForeignKey("LeaveTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveAdmin.LeavePolicyEmployee", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveDayType", "LeaveDayType")
                        .WithMany("LeavePolicyEmployees")
                        .HasForeignKey("LeaveDayTypeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveEligibility", "LeaveEligibility")
                        .WithMany("LeavePolicyEmployees")
                        .HasForeignKey("LeaveEligibilityId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", "LeaveType")
                        .WithMany("LeavePolicyEmployees")
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveYear", "LeaveYear")
                        .WithMany()
                        .HasForeignKey("LeaveYearId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("LeavePolicyEmployees")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveApproval", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveApprover", "LeaveApprover")
                        .WithMany("LeaveApprovals")
                        .HasForeignKey("LeaveApproverId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveClosing")
                        .WithMany("LeaveApprovals")
                        .HasForeignKey("LeaveClosingId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveRequest", "LeaveRequest")
                        .WithOne("LeaveApproval")
                        .HasForeignKey("ErpCore.Entities.HR.Leave.LeaveApproval", "LeaveRequestId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveClosing", b =>
                {
                    b.HasOne("ErpCore.Entities.Department", "Department")
                        .WithMany("LeaveClosings")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ErpCore.Entities.HRSetup.Group", "Group")
                        .WithMany("LeaveClosings")
                        .HasForeignKey("GroupId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveYear", "LeaveYear")
                        .WithMany()
                        .HasForeignKey("LeaveYearId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveRequest", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveAdmin.LeaveOpening", "LeaveOpening")
                        .WithOne("LeaveRequest")
                        .HasForeignKey("ErpCore.Entities.HR.Leave.LeaveRequest", "LeaveOpeningId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveRequestDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveRequest", "LeaveRequest")
                        .WithMany("LeaveRequestDetails")
                        .HasForeignKey("LeaveRequestId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", "LeaveType")
                        .WithMany("LeaveRequestDetails")
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveYear", "LeaveYear")
                        .WithMany()
                        .HasForeignKey("LeaveYearId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.DecimalRoundingMatrix", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveAdmin.LeavePolicyEmployee", "LeavePolicyEmployee")
                        .WithMany("DecimalRoundingMatrices")
                        .HasForeignKey("LeavePolicyEmployeeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeavePolicy", "LeavePolicy")
                        .WithMany("DecimalRoundingMatrices")
                        .HasForeignKey("LeavePolicyId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveApprover", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeavePolicy", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.Group", "Group")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("GroupId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveDayType", "LeaveDayType")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("LeaveDayTypeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveEligibility", "LeaveEligibility")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("LeaveEligibilityId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", "LeaveType")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveYear", "LeaveYear")
                        .WithMany()
                        .HasForeignKey("LeaveYearId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveSubType", "LeaveSubType")
                        .WithMany()
                        .HasForeignKey("LeaveSubTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveTypeBalance", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeaveType", "LeaveType")
                        .WithMany("LeaveTypeBalances")
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("LeaveTypeBalances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Leave.LeaveSetup.ProrateMatrix", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveAdmin.LeavePolicyEmployee", "LeavePolicyEmployee")
                        .WithMany("ProrateMatrices")
                        .HasForeignKey("LeavePolicyEmployeeId");

                    b.HasOne("ErpCore.Entities.HR.Leave.LeaveSetup.LeavePolicy", "LeavePolicy")
                        .WithMany("ProrateMatrices")
                        .HasForeignKey("LeavePolicyId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.Gratuity", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.FundSetup", "FundSetup")
                        .WithMany()
                        .HasForeignKey("FundSetupId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.GratuityType", "GratuityType")
                        .WithMany("Gratuities")
                        .HasForeignKey("GratuityTypeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.LeavingReason", "LeavingReason")
                        .WithMany()
                        .HasForeignKey("LeavingReasonId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.LoanSetup.UserLoan", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.LoanSetup.LoanType", "LoanType")
                        .WithMany("UserLoans")
                        .HasForeignKey("LoanTypeId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("UserLoans")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.LoanSetup.UserLoanPayslip", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.PaySlip", "PaySlip")
                        .WithMany("UserLoanPayslips")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.HR.Payroll.LoanSetup.UserLoan", "UserLoan")
                        .WithMany("UserLoanPayslips")
                        .HasForeignKey("UserLoanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.MonthlyUserSalary", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Payroll", "Payroll")
                        .WithMany("MonthlyUserSalaries")
                        .HasForeignKey("PayrollId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PfPayment", "PfPayment")
                        .WithMany("MonthlyUserSalaries")
                        .HasForeignKey("PfPaymentId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollAdmin.StopSalary", "StopSalary")
                        .WithMany("MonthlyUserSalaries")
                        .HasForeignKey("StopSalaryId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.UserSalary", "UserSalary")
                        .WithMany("MonthlyUserSalaries")
                        .HasForeignKey("UserSalaryId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollAdmin.StopSalary", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("StopSalaries")
                        .HasForeignKey("PayrollTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Allowance", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceDeduction", "AllowanceDeduction")
                        .WithMany("Allowances")
                        .HasForeignKey("AllowanceDeductionId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceDeduction", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceArrear")
                        .WithMany("AllowanceDeductions")
                        .HasForeignKey("AllowanceArrearArrearAllowanceId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceCalculationType", "AllowanceCalculationType")
                        .WithMany("AllowanceDeductions")
                        .HasForeignKey("AllowanceCalculationTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.AllowanceRate", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Allowance", "Allowance")
                        .WithMany("AllowanceRates")
                        .HasForeignKey("AllowanceId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.CompensationTransaction", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Allowance", "Allowance")
                        .WithMany()
                        .HasForeignKey("AllowanceId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("CompensationTransactions")
                        .HasForeignKey("PayrollTypeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollYear", "PayrollYear")
                        .WithMany()
                        .HasForeignKey("PayrollyearId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("CompensationTransactions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.FundSetup", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollYear", "PayrollYear")
                        .WithMany()
                        .HasForeignKey("PayrollYearId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.GratuitySlabGratuity", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.Gratuity", "Gratuity")
                        .WithMany("GratuitySlabGratuities")
                        .HasForeignKey("GratuityId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.GratuitySlab", "GratuitySlab")
                        .WithMany("GratuitySlabGratuities")
                        .HasForeignKey("GratuitySlabId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayroll", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.Bank", "Bank")
                        .WithMany("MasterPayrolls")
                        .HasForeignKey("BankId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayrollDetails", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Allowance", "Allowance")
                        .WithMany()
                        .HasForeignKey("AllowanceId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Frequency", "Frequency")
                        .WithMany("MasterPayrollDetails")
                        .HasForeignKey("FrequencyId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayroll")
                        .WithMany("MasterPayrollDetails")
                        .HasForeignKey("MasterPayrollId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("MasterPayrollDetails")
                        .HasForeignKey("PayrollTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.Payroll", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayroll", "MasterPayroll")
                        .WithMany("Payrolls")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollBank", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.BankAdviceTemplate", "BankAdviceTemplate")
                        .WithMany("PayrollBanks")
                        .HasForeignKey("BankAdviceTemplateId");

                    b.HasOne("ErpCore.Entities.HRSetup.Bank", "Bank")
                        .WithMany("PayrollBanks")
                        .HasForeignKey("BankId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.ChequeTemplate", "ChequeTemplate")
                        .WithMany("PayrollBanks")
                        .HasForeignKey("ChequeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.PfPayment", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.FundSetup", "FundSetup")
                        .WithMany()
                        .HasForeignKey("FundSetupId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.LeavingReason", "LeavingReason")
                        .WithMany("PfPayments")
                        .HasForeignKey("LeavingReasonId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithOne("PfPayment")
                        .HasForeignKey("ErpCore.Entities.HR.Payroll.PayrollSetup.PfPayment", "UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryStructure", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("SalaryStructures")
                        .HasForeignKey("PayrollTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryStructureDetail", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Allowance", "Allowance")
                        .WithMany("SalaryStructureDetails")
                        .HasForeignKey("AllowanceId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Benefit", "Benefit")
                        .WithMany("SalaryStructureDetails")
                        .HasForeignKey("BenefitId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryCalculationType", "SalaryCalculationType")
                        .WithMany()
                        .HasForeignKey("SalaryCalculationTypeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryStructure", "SalaryStructure")
                        .WithMany("SalaryStructureDetails")
                        .HasForeignKey("SalaryStructureId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.PayrollSetup.UserSalary", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.Gratuity")
                        .WithMany("UserSalaries")
                        .HasForeignKey("GratuityUserGratuityId");

                    b.HasOne("ErpCore.Entities.HRSetup.Group", "Group")
                        .WithMany("UserSalaries")
                        .HasForeignKey("GroupId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.IncomeTaxRule", "IncomeTaxRule")
                        .WithMany("UserSalaries")
                        .HasForeignKey("IncomeTaxRuleId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.IncomeTaxRule", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollYear", "PayrollYear")
                        .WithMany()
                        .HasForeignKey("PayrollYearId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxableIncomeAdjustment", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.Group", "Group")
                        .WithMany("TaxableIncomeAdjustments")
                        .HasForeignKey("GroupId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("TaxableIncomeAdjustments")
                        .HasForeignKey("PayrollTypeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.TaxAdjustmentReason", "TaxAdjustmentReason")
                        .WithMany("TaxableIncomeAdjustments")
                        .HasForeignKey("TaxAdjustmentReasonId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.TaxYear", "TaxYear")
                        .WithMany()
                        .HasForeignKey("TaxYearId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("TaxableIncomeAdjustments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxBenefit", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Benefit", "Benefit")
                        .WithMany("TaxBenefits")
                        .HasForeignKey("BenefitId");

                    b.HasOne("ErpCore.Entities.Branch")
                        .WithMany("TaxBenefits")
                        .HasForeignKey("BranchId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("TaxBenefits")
                        .HasForeignKey("PayrollTypeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.TaxYear", "TaxYear")
                        .WithMany()
                        .HasForeignKey("TaxYearId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxRelief", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.IncomeTaxRule", "IncomeTaxRule")
                        .WithMany("TaxReliefs")
                        .HasForeignKey("IncomeTaxRuleId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.Payroll.TaxSetup.TaxSchedule", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.IncomeTaxRule", "IncomeTaxRule")
                        .WithMany("TaxSchedules")
                        .HasForeignKey("IncomeTaxRuleId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.PaySlip", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.MonthlyUserSalary", "MonthlyUserSalary")
                        .WithOne("PaySlip")
                        .HasForeignKey("ErpCore.Entities.HR.PaySlip", "MonthlyUserSalaryId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("PaySlips")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HR.TaxAdjustment", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.PayrollType", "PayrollType")
                        .WithMany("TaxAdjustments")
                        .HasForeignKey("PayrollTypeId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.TaxAdjustmentReason", "TaxAdjustmentReason")
                        .WithMany("TaxAdjustments")
                        .HasForeignKey("TaxAdjustmentReasonId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.TaxSetup.TaxYear", "TaxYear")
                        .WithMany()
                        .HasForeignKey("TaxYearId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("TaxAdjustments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.GazettedHolidays", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("GazettedHolidays")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Group", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.SalaryStructure", "SalaryStructure")
                        .WithOne("Group")
                        .HasForeignKey("ErpCore.Entities.HRSetup.Group", "SalaryStructureId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.Relation", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("Relations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.SkillLevel", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.University", "University")
                        .WithMany("SkillLevels")
                        .HasForeignKey("UniversityId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.University", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("Universities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserCompany", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.Designation", "Designation")
                        .WithMany("UserCompanies")
                        .HasForeignKey("DesignationId");

                    b.HasOne("ErpCore.Entities.HRSetup.EmployeeStatus", "EmployeeStatus")
                        .WithMany("UserCompanies")
                        .HasForeignKey("EmployeeStatusId");

                    b.HasOne("ErpCore.Entities.HRSetup.EmployeeType", "EmployeeType")
                        .WithMany("UserCompanies")
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("ErpCore.Entities.HRSetup.Function", "Function")
                        .WithMany("UserCompanies")
                        .HasForeignKey("FunctionId");

                    b.HasOne("ErpCore.Entities.HRSetup.ManagementLevel", "ManagementLevel")
                        .WithMany("UserCompanies")
                        .HasForeignKey("ManagementLevelId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithOne("UserCompany")
                        .HasForeignKey("ErpCore.Entities.HRSetup.UserCompany", "UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserDocument", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("UserDocuments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.UserLanguage", b =>
                {
                    b.HasOne("ErpCore.Entities.HRSetup.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.HRSetup.WorkExperience", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.InseminationPrep", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("InseminationPrep")
                        .HasForeignKey("ErpCore.Entities.InseminationPrep", "PatientClinicalRecordId");
                });

            modelBuilder.Entity("ErpCore.Entities.Inventory", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithOne("Inventory")
                        .HasForeignKey("ErpCore.Entities.Inventory", "InventoryItemId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Area", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Region", "Region")
                        .WithMany("Areas")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Customer", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("ErpCore.Entities.InventorySetup.ModeOfPayment", "ModeOfPayment")
                        .WithMany("Customers")
                        .HasForeignKey("ModeOfPaymentId");

                    b.HasOne("ErpCore.Entities.InventorySetup.SalesPerson", "SalesPerson")
                        .WithMany("Customers")
                        .HasForeignKey("SalesPersonId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerAccount", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.CustomerType", "CustomerType")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerBank", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.CustomerType", "CustomerType")
                        .WithMany("CustomerBanks")
                        .HasForeignKey("CustomerTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerPricePickLevel", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.CustomerType", "CustomerType")
                        .WithMany("CustomerPricePickLevels")
                        .HasForeignKey("CustomerTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.CustomerWarehouse", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.CustomerType", "CustomerType")
                        .WithMany("CustomerWarehouses")
                        .HasForeignKey("CustomerTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Distributor", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Territory", "Territory")
                        .WithOne("Distributor")
                        .HasForeignKey("ErpCore.Entities.InventorySetup.Distributor", "TerritoryId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.InventoryItem", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Brand", "Brand")
                        .WithMany("InventoryItems")
                        .HasForeignKey("BrandId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItemCategory", "InventoryItemCategory")
                        .WithMany()
                        .HasForeignKey("InventoryItemCategoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.PackCategory", "PackCategory")
                        .WithMany()
                        .HasForeignKey("PackCategoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.PackSize", "PackSize")
                        .WithMany()
                        .HasForeignKey("PackSizeId");

                    b.HasOne("ErpCore.Entities.InventorySetup.PackType", "PackType")
                        .WithMany()
                        .HasForeignKey("PackTypeId");

                    b.HasOne("ErpCore.Entities.InventorySetup.PackageType", "PackageType")
                        .WithMany()
                        .HasForeignKey("PackageTypeId");

                    b.HasOne("ErpCore.Entities.InventorySetup.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("ErpCore.Entities.InventorySetup.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.SalesPerson", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Distributor", "Distributor")
                        .WithMany("SalesPeople")
                        .HasForeignKey("DistributorId");
                });

            modelBuilder.Entity("ErpCore.Entities.InventorySetup.Territory", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Area", "Area")
                        .WithMany("Territories")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("ErpCore.Entities.Partner", b =>
                {
                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithOne("Partner")
                        .HasForeignKey("ErpCore.Entities.Partner", "PatientId");
                });

            modelBuilder.Entity("ErpCore.Entities.Patient", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientPackage", "PatientPackage")
                        .WithOne("Patient")
                        .HasForeignKey("ErpCore.Entities.Patient", "PatientPackageId");

                    b.HasOne("ErpCore.Entities.PatientReference", "PatientReference")
                        .WithMany("Patients")
                        .HasForeignKey("PatientReferenceId");

                    b.HasOne("ErpCore.Entities.HimsSetup.VisitNature", "VisitNature")
                        .WithMany("Patients")
                        .HasForeignKey("VisitNatureId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientClinicalRecord", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("ErpCore.Entities.HimsSetup.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId");

                    b.HasOne("ErpCore.Entities.HimsSetup.TreatmentType", "TreatmentType")
                        .WithMany()
                        .HasForeignKey("TreatmentTypeId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientDocument", b =>
                {
                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany("PatientDocuments")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientEmbryology", b =>
                {
                    b.HasOne("ErpCore.Entities.Tvopu", "Tvopu")
                        .WithMany()
                        .HasForeignKey("TvopuId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientEmbryologyDetails", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientEmbryology", "PatientEmbryology")
                        .WithMany("PatientEmbryologyDetails")
                        .HasForeignKey("PatientEmbryologyId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientInsemenation", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("PatientInsemenation")
                        .HasForeignKey("ErpCore.Entities.PatientInsemenation", "PatientClinicalRecordId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientInvoice", b =>
                {
                    b.HasOne("ErpCore.Entities.Appointment", "Appointment")
                        .WithOne("PatientInvoice")
                        .HasForeignKey("ErpCore.Entities.PatientInvoice", "AppointmentId");

                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany("PatientInvoices")
                        .HasForeignKey("PatientId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("PatientInvoices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientInvoiceItem", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientInvoice", "PatientInvoice")
                        .WithMany("PatientInvoiceItems")
                        .HasForeignKey("PatientInvoiceId");
                });

            modelBuilder.Entity("ErpCore.Entities.PatientPackage", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Package", "Package")
                        .WithMany("PatientPackages")
                        .HasForeignKey("PackageId");
                });

            modelBuilder.Entity("ErpCore.Entities.Permission", b =>
                {
                    b.HasOne("ErpCore.Entities.Feature", "Feature")
                        .WithMany("Permissions")
                        .HasForeignKey("FeatureId");

                    b.HasOne("ErpCore.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseIndent", b =>
                {
                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("PurchaseIndents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseIndentItem", b =>
                {
                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany("PurchaseIndentItems")
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("PurchaseIndentItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ErpCore.Entities.PurchaseIndent", "PurchaseIndent")
                        .WithMany("PurchaseIndentItems")
                        .HasForeignKey("PurchaseIndentId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseInvoice", b =>
                {
                    b.HasOne("ErpCore.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithOne("PurchaseInvoice")
                        .HasForeignKey("ErpCore.Entities.PurchaseInvoice", "PurchaseOrderId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryCurrency", "InventoryCurrency")
                        .WithMany()
                        .HasForeignKey("InventoryCurrencyId");

                    b.HasOne("ErpCore.Entities.PurchaseIndent", "PurchaseIndent")
                        .WithOne("PurchaseOrder")
                        .HasForeignKey("ErpCore.Entities.PurchaseOrder", "PurchaseIndentId");

                    b.HasOne("ErpCore.Entities.InventorySetup.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ErpCore.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("ErpCore.Entities.GRN", "GRN")
                        .WithOne("PurchaseReturn")
                        .HasForeignKey("ErpCore.Entities.PurchaseReturn", "GRNId");

                    b.HasOne("ErpCore.Entities.InventorySetup.ReturnReason", "ReturnReason")
                        .WithMany()
                        .HasForeignKey("ReturnReasonId");
                });

            modelBuilder.Entity("ErpCore.Entities.PurchaseReturnItem", b =>
                {
                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany("PurchaseReturnItems")
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("PurchaseReturnItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ErpCore.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnItems")
                        .HasForeignKey("PurchaseReturnId");
                });

            modelBuilder.Entity("ErpCore.Entities.Role", b =>
                {
                    b.HasOne("ErpCore.Entities.Department", "Department")
                        .WithMany("Roles")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("ErpCore.Entities.RoleFeature", b =>
                {
                    b.HasOne("ErpCore.Entities.Feature", "Feature")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.Role", "Role")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.RoleModule", b =>
                {
                    b.HasOne("ErpCore.Entities.Module", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErpCore.Entities.SalesIndent", b =>
                {
                    b.HasOne("ErpCore.Entities.DeliveryChallan", "DeliveryChallan")
                        .WithMany()
                        .HasForeignKey("DeliveryChallanId");

                    b.HasOne("ErpCore.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany()
                        .HasForeignKey("DeliveryOrderId");

                    b.HasOne("ErpCore.Entities.SalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("SalesIndents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesIndentItem", b =>
                {
                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("SalesIndentItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ErpCore.Entities.SalesIndent", "SalesIndent")
                        .WithMany("SalesIndentItems")
                        .HasForeignKey("SalesIndentId");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesInvoice", b =>
                {
                    b.HasOne("ErpCore.Entities.DeliveryChallan", "DeliveryChallan")
                        .WithOne("SalesInvoice")
                        .HasForeignKey("ErpCore.Entities.SalesInvoice", "DeliveryChallanId");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesOrder", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ErpCore.Entities.InventorySetup.ModeOfPayment", "ModeOfPayment")
                        .WithMany("SalesOrders")
                        .HasForeignKey("ModeOfPaymentId");

                    b.HasOne("ErpCore.Entities.SalesIndent", "SalesIndent")
                        .WithOne("SalesOrder")
                        .HasForeignKey("ErpCore.Entities.SalesOrder", "SalesIndentId");

                    b.HasOne("ErpCore.Entities.InventorySetup.SalesPerson", "SalesPerson")
                        .WithMany("SalesOrders")
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("ErpCore.Entities.InventorySetup.Tax", "Tax")
                        .WithMany("SalesOrders")
                        .HasForeignKey("TaxId");

                    b.HasOne("ErpCore.Entities.User", "User")
                        .WithMany("SalesOrders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesOrderItem", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.Comission", "Comission")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ComissionId");

                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ErpCore.Entities.InventorySetup.PackType", "PackType")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("PackTypeId");

                    b.HasOne("ErpCore.Entities.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesReturn", b =>
                {
                    b.HasOne("ErpCore.Entities.InventorySetup.ReturnReason", "ReturnReason")
                        .WithMany()
                        .HasForeignKey("ReturnReasonId");

                    b.HasOne("ErpCore.Entities.SalesInvoice", "SalesInvoice")
                        .WithOne("SalesReturn")
                        .HasForeignKey("ErpCore.Entities.SalesReturn", "SalesInvoiceId");

                    b.HasOne("ErpCore.Entities.SalesOrder", "SalesOrder")
                        .WithOne("SalesReturn")
                        .HasForeignKey("ErpCore.Entities.SalesReturn", "SalesOrderId");
                });

            modelBuilder.Entity("ErpCore.Entities.SalesReturnItem", b =>
                {
                    b.HasOne("ErpCore.Entities.Inventory", "Inventory")
                        .WithMany("SalesReturnItems")
                        .HasForeignKey("InventoryId");

                    b.HasOne("ErpCore.Entities.InventorySetup.InventoryItem", "InventoryItem")
                        .WithMany("SalesReturnItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ErpCore.Entities.SalesReturn", "SalesReturn")
                        .WithMany("SalesReturnItems")
                        .HasForeignKey("SalesReturnId");
                });

            modelBuilder.Entity("ErpCore.Entities.SemenAnalysis", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ErpCore.Entities.ThawAssessment", b =>
                {
                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("ThawAssessment")
                        .HasForeignKey("ErpCore.Entities.ThawAssessment", "PatientClinicalRecordId");

                    b.HasOne("ErpCore.Entities.Tvopu", "Tvopu")
                        .WithMany()
                        .HasForeignKey("TvopuId");
                });

            modelBuilder.Entity("ErpCore.Entities.Tvopu", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Embryologist", "Embryologist")
                        .WithMany("Tvopus")
                        .HasForeignKey("EmbryologistId");

                    b.HasOne("ErpCore.Entities.PatientClinicalRecord", "PatientClinicalRecord")
                        .WithOne("Tvopu")
                        .HasForeignKey("ErpCore.Entities.Tvopu", "PatientClinicalRecordId");
                });

            modelBuilder.Entity("ErpCore.Entities.User", b =>
                {
                    b.HasOne("ErpCore.Entities.HR.Attendance.AttendanceSetup.AssignRoster", "AssignRoster")
                        .WithMany("Users")
                        .HasForeignKey("AssignRosterId");

                    b.HasOne("ErpCore.Entities.HRSetup.Bank", "Bank")
                        .WithOne("User")
                        .HasForeignKey("ErpCore.Entities.User", "BankId");

                    b.HasOne("ErpCore.Entities.HRSetup.CostCenter", "CostCenter")
                        .WithMany("Users")
                        .HasForeignKey("CostCenterId");

                    b.HasOne("ErpCore.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.Gratuity", "Gratuity")
                        .WithOne("User")
                        .HasForeignKey("ErpCore.Entities.User", "GratuityId");

                    b.HasOne("ErpCore.Entities.HRSetup.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("ErpCore.Entities.AppUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.MasterPayroll", "MasterPayroll")
                        .WithMany("Users")
                        .HasForeignKey("MasterPayrollId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.Payroll", "Payroll")
                        .WithOne("User")
                        .HasForeignKey("ErpCore.Entities.User", "PayrollId");

                    b.HasOne("ErpCore.Entities.HRSetup.Religion", "Religion")
                        .WithMany("Users")
                        .HasForeignKey("ReligionId");

                    b.HasOne("ErpCore.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("ErpCore.Entities.HRSetup.UserPhoto", "UserPhoto")
                        .WithOne("User")
                        .HasForeignKey("ErpCore.Entities.User", "UserPhotoId");

                    b.HasOne("ErpCore.Entities.HR.Payroll.PayrollSetup.UserSalary", "UserSalary")
                        .WithOne("User")
                        .HasForeignKey("ErpCore.Entities.User", "UserSalaryId");
                });

            modelBuilder.Entity("ErpCore.Entities.Visit", b =>
                {
                    b.HasOne("ErpCore.Entities.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientId");

                    b.HasOne("ErpCore.Entities.PatientVital", "PatientVital")
                        .WithOne("Visit")
                        .HasForeignKey("ErpCore.Entities.Visit", "PatientVitalId");
                });

            modelBuilder.Entity("ErpCore.Entities.VisitDiagnosis", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("ErpCore.Entities.Visit", "Visit")
                        .WithMany("VisitDiagnoses")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("ErpCore.Entities.VisitNote", b =>
                {
                    b.HasOne("ErpCore.Entities.Visit", "Visit")
                        .WithOne("VisitNote")
                        .HasForeignKey("ErpCore.Entities.VisitNote", "VisitId");
                });

            modelBuilder.Entity("ErpCore.Entities.VisitTest", b =>
                {
                    b.HasOne("ErpCore.Entities.HimsSetup.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.HasOne("ErpCore.Entities.Visit", "Visit")
                        .WithMany("VisitTests")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ErpCore.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ErpCore.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErpCore.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ErpCore.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
